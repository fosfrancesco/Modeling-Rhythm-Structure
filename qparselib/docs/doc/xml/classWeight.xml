<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classWeight" kind="class" language="C++" prot="public">
    <compoundname>Weight</compoundname>
    <includes local="no">Weight.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classWeight_1a01c1d2af2914d5429696a79f891318ea" prot="protected" static="no" mutable="no">
        <type><ref refid="classLetterWeight" kindref="compound">LetterWeight</ref> *</type>
        <definition>LetterWeight* Weight::_letter</definition>
        <argsstring></argsstring>
        <name>_letter</name>
        <briefdescription>
<para>letter always points to an object of one of the derived *Weight classes never to an object of the <ref refid="classWeight" kindref="compound">Weight</ref> base class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="233" column="1" bodyfile="src/weight/Weight.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classWeight_1ac33fb795eaee8c56d2e4179020a0d2eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Weight::Weight</definition>
        <argsstring>(LetterWeight *w=NULL)</argsstring>
        <name>Weight</name>
        <param>
          <type><ref refid="classLetterWeight" kindref="compound">LetterWeight</ref> *</type>
          <declname>w</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>wrapper and unknown weight constructor (empty envelope, default). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="127" column="1" bodyfile="src/weight/Weight.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga9283a1d2c4b91605a0c60a2c7033cb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Weight::Weight</definition>
        <argsstring>(const Weight &amp;w)</argsstring>
        <name>Weight</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>clone the letter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="130" column="1" bodyfile="src/weight/Weight.cpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaf09ef86cb7c7b833cd3ea327f153543f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Weight::~Weight</definition>
        <argsstring>()</argsstring>
        <name>~Weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="132" column="1" bodyfile="src/weight/Weight.cpp" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga548aadee137a6c274aeb1e56607b05dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
        <definition>Weight &amp; Weight::operator=</definition>
        <argsstring>(const Weight &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="134" column="1" bodyfile="src/weight/Weight.cpp" bodystart="98" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classWeight_1a6b38fd1721594ffc303858e6201d1b2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classLetterWeight" kindref="compound">LetterWeight</ref> *</type>
        <definition>LetterWeight* Weight::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>must not be unknown </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="142" column="1" bodyfile="src/weight/Weight.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gade2f7d7b4ddf749326fb0a6c674387ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref> *</type>
        <definition>Weight * Weight::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="144" column="1" bodyfile="src/weight/Weight.cpp" bodystart="113" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga2185b6a5b1957fcab19bf6281adeed47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Weight::unknown</definition>
        <argsstring>() const</argsstring>
        <name>unknown</name>
        <briefdescription>
<para>unknown weight is a <ref refid="classWeight" kindref="compound">Weight</ref> with NULL letter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="147" column="1" bodyfile="src/weight/Weight.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaf8f62c5cee5ffa37e30ef7239a33b729" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Weight::make</definition>
        <argsstring>(double v) const</argsstring>
        <name>make</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classLetterWeight_1af1f898e0845f59299440fc50a58fd2f1" kindref="member">LetterWeight.make</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="150" column="1" bodyfile="src/weight/Weight.cpp" bodystart="128" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gad236331c6f6ca8dd9fced5ffffd79f35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Weight::hasType</definition>
        <argsstring>(std::string code) const</argsstring>
        <name>hasType</name>
        <param>
          <type>std::string</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>is the code of the letter weight if there is one or &quot;UNKNOWN&quot; otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="154" column="1" bodyfile="src/weight/Weight.cpp" bodystart="173" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga68bd9621500f31ba5f0fbe04dc5a00e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Weight::norm</definition>
        <argsstring>()</argsstring>
        <name>norm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWeight" kindref="compound">Weight</ref> must not be unknown (letter != NULL) </para>
</simplesect>
<simplesect kind="warning"><para>not const: may need recomputations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="158" column="1" bodyfile="src/weight/Weight.cpp" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga5d63ead0a1d21ee5628c643fca773903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::scalar</definition>
        <argsstring>(double)</argsstring>
        <name>scalar</name>
        <param>
          <type>double</type>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWeight" kindref="compound">Weight</ref> must not be unknown (letter != NULL). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="162" column="1" bodyfile="src/weight/Weight.cpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gad0c93ac5f963b02ca3f6c1d5d02f5d61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Weight::zero</definition>
        <argsstring>() const</argsstring>
        <name>zero</name>
        <briefdescription>
<para>this weight is neutral element for + (absorbing element for *). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="165" column="1" bodyfile="src/weight/Weight.cpp" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaf7214d45d290b39f6bb2555fc46adf55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Weight::get_zero</definition>
        <argsstring>() const</argsstring>
        <name>get_zero</name>
        <briefdescription>
<para>return the neutral element for add (absorbing element for mult) for the <ref refid="classLetterWeight" kindref="compound">LetterWeight</ref>, if any otherwise return unknown <ref refid="classWeight" kindref="compound">Weight</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="170" column="1" bodyfile="src/weight/Weight.cpp" bodystart="141" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classWeight_1a840aea7512916a91b6baf0a0772b46db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::operator+=</definition>
        <argsstring>(const Weight &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__weight_1ga261db18abff49cac38bd02b8f7af94db" kindref="member">add</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="173" column="1" bodyfile="src/weight/Weight.hpp" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga0fb0a47475e245e955aa6e7926f7a0f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Weight::one</definition>
        <argsstring>() const</argsstring>
        <name>one</name>
        <briefdescription>
<para>this weight is neutral element for * </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="183" column="1" bodyfile="src/weight/Weight.cpp" bodystart="226" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga48012227b61aa4c10064bed70936d78e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Weight::get_one</definition>
        <argsstring>() const</argsstring>
        <name>get_one</name>
        <briefdescription>
<para>return the neutral element for mult for the <ref refid="classLetterWeight" kindref="compound">LetterWeight</ref>, if any otherwise return unknown <ref refid="classWeight" kindref="compound">Weight</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="187" column="1" bodyfile="src/weight/Weight.cpp" bodystart="154" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classWeight_1a4968f430abd50a0eaea15d01422ef0bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::operator*=</definition>
        <argsstring>(const Weight &amp;rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__weight_1ga7188f571e507d7f31b76de7faebdb78f" kindref="member">mult</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="190" column="1" bodyfile="src/weight/Weight.hpp" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gabc3309e134f0fdda38ebbcb12d350a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <briefdescription>
<para>multiplicative inverse, for semifields </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWeight" kindref="compound">Weight</ref> must not be zero </para>
</simplesect>
<simplesect kind="warning"><para>this <ref refid="classWeight" kindref="compound">Weight</ref> must not be unknown (letter != NULL)</para>
</simplesect>
<xrefsect id="todo_1_todo000040"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR : replace by div with const rhs </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="204" column="1" bodyfile="src/weight/Weight.cpp" bodystart="200" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaace5b230ea1544aac7b049091e142bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>delete the letter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this weight becomes unknown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="208" column="1" bodyfile="src/weight/Weight.cpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaeb6c4f1cf187978576df2bc31a5e5eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Weight::save_to_string</definition>
        <argsstring>()</argsstring>
        <name>save_to_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="210" column="1" bodyfile="src/weight/Weight.cpp" bodystart="319" bodyend="322"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classWeight_1a2908b386adb4cbc893dcf9f631b8a85d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Weight &amp;, const Weight &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <defname>lhs</defname>
        </param>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__weight_1ga11236e38c2dc7cc66a367c2ea5921c1e" kindref="member">equal</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="217" column="1" bodyfile="src/weight/Weight.hpp" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="friend" id="classWeight_1af75080233bdd2e853a5f3b2b80e262af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Weight &amp;, const Weight &amp;)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <defname>lhs</defname>
        </param>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__weight_1gab3a3a5fb989514e5673582b9a7107d97" kindref="member">smaller</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="220" column="1" bodyfile="src/weight/Weight.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="friend" id="classWeight_1a5fa6fc187426e2cc6aa40f7acddf8455" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const Weight &amp;rhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>print </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="223" column="1" bodyfile="src/weight/Weight.hpp" bodystart="290" bodyend="294"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="group__weight_1ga11236e38c2dc7cc66a367c2ea5921c1e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Weight::equal</definition>
        <argsstring>(const Weight &amp;rhs) const</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>binary operators are defined only between descendant Weights of same typeid </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>two unknown Weights are equal</para>
</listitem><listitem><para>one unknown weight and one not unknown are not equal</para>
</listitem><listitem><para>equality of two not unknown weight depends on the descendant class </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="241" column="1" bodyfile="src/weight/Weight.cpp" bodystart="235" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gab3a3a5fb989514e5673582b9a7107d97" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Weight::smaller</definition>
        <argsstring>(const Weight &amp;rhs) const</argsstring>
        <name>smaller</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>unknown <ref refid="classWeight" kindref="compound">Weight</ref> is minimal:</para>
</listitem><listitem><para>unknown <ref refid="classWeight" kindref="compound">Weight</ref> is smaller than any not unknown <ref refid="classWeight" kindref="compound">Weight</ref></para>
</listitem><listitem><para>not unknown <ref refid="classWeight" kindref="compound">Weight</ref> is not smaller that unknown <ref refid="classWeight" kindref="compound">Weight</ref></para>
</listitem><listitem><para>unknown <ref refid="classWeight" kindref="compound">Weight</ref> is not smaller than unknown <ref refid="classWeight" kindref="compound">Weight</ref></para>
</listitem><listitem><para>inequality of two not unknown weight depends on the descendant class </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="248" column="1" bodyfile="src/weight/Weight.cpp" bodystart="251" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga261db18abff49cac38bd02b8f7af94db" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::add</definition>
        <argsstring>(const Weight &amp;rhs)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this and rhs must not be unknown </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="251" column="1" bodyfile="src/weight/Weight.cpp" bodystart="268" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga7188f571e507d7f31b76de7faebdb78f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::mult</definition>
        <argsstring>(const Weight &amp;rhs)</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classWeight" kindref="compound">Weight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this and rhs must not be unknown </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="254" column="1" bodyfile="src/weight/Weight.cpp" bodystart="296" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga0f92a47af6c72b59183835d0b11a3d60" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Weight::print</definition>
        <argsstring>(std::ostream &amp;o) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Weight.hpp" line="256" column="1" bodyfile="src/weight/Weight.cpp" bodystart="310" bodyend="317"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class of polymorphic weight domains for tree series. </para>
    </briefdescription>
    <detaileddescription>
<para>Every concrete weight domain must be a derived class of <ref refid="classWeight" kindref="compound">Weight</ref>.</para>
<para>the type <ref refid="classWeight" kindref="compound">Weight</ref> is the union of an unknown weight value and different weight domain.</para>
<para>it is implemented as an envelope, containing either<itemizedlist>
<listitem><para>a null letter. in this case, we have an unknown weight value.</para>
</listitem><listitem><para>a non-null letter, pointing to an object of a derived weight class (concrete weight). In this case, the envelope is a wrapper for the object of the derived class, corresponding to an actual (known) weight value. see Envelope Letter Idiom (wikibooks)</para>
</listitem></itemizedlist>
</para>
<para>Client code only uses the <ref refid="classWeight" kindref="compound">Weight</ref> class (not the derived classes), except for allocation of new concrete weights values by <ref refid="classWeight" kindref="compound">Weight(new DerivedWeight(...))</ref> </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="490">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="489">
        <label>Weight</label>
        <link refid="classWeight"/>
        <childnode refid="490" relation="usage">
          <edgelabel>_letter</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/weight/Weight.hpp" line="120" column="1" bodyfile="src/weight/Weight.hpp" bodystart="119" bodyend="257"/>
    <listofallmembers>
      <member refid="classWeight_1a01c1d2af2914d5429696a79f891318ea" prot="protected" virt="non-virtual"><scope>Weight</scope><name>_letter</name></member>
      <member refid="group__weight_1ga261db18abff49cac38bd02b8f7af94db" prot="protected" virt="non-virtual"><scope>Weight</scope><name>add</name></member>
      <member refid="group__weight_1gaace5b230ea1544aac7b049091e142bd3" prot="public" virt="non-virtual"><scope>Weight</scope><name>clear</name></member>
      <member refid="group__weight_1gade2f7d7b4ddf749326fb0a6c674387ed" prot="public" virt="non-virtual"><scope>Weight</scope><name>clone</name></member>
      <member refid="group__weight_1ga11236e38c2dc7cc66a367c2ea5921c1e" prot="protected" virt="non-virtual"><scope>Weight</scope><name>equal</name></member>
      <member refid="group__weight_1ga48012227b61aa4c10064bed70936d78e" prot="public" virt="non-virtual"><scope>Weight</scope><name>get_one</name></member>
      <member refid="group__weight_1gaf7214d45d290b39f6bb2555fc46adf55" prot="public" virt="non-virtual"><scope>Weight</scope><name>get_zero</name></member>
      <member refid="group__weight_1gad236331c6f6ca8dd9fced5ffffd79f35" prot="public" virt="non-virtual"><scope>Weight</scope><name>hasType</name></member>
      <member refid="group__weight_1gabc3309e134f0fdda38ebbcb12d350a28" prot="public" virt="non-virtual"><scope>Weight</scope><name>invert</name></member>
      <member refid="group__weight_1gaf8f62c5cee5ffa37e30ef7239a33b729" prot="public" virt="non-virtual"><scope>Weight</scope><name>make</name></member>
      <member refid="group__weight_1ga7188f571e507d7f31b76de7faebdb78f" prot="protected" virt="non-virtual"><scope>Weight</scope><name>mult</name></member>
      <member refid="group__weight_1ga68bd9621500f31ba5f0fbe04dc5a00e4" prot="public" virt="non-virtual"><scope>Weight</scope><name>norm</name></member>
      <member refid="group__weight_1ga0fb0a47475e245e955aa6e7926f7a0f6" prot="public" virt="non-virtual"><scope>Weight</scope><name>one</name></member>
      <member refid="classWeight_1a4968f430abd50a0eaea15d01422ef0bb" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator*=</name></member>
      <member refid="classWeight_1a840aea7512916a91b6baf0a0772b46db" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator+=</name></member>
      <member refid="classWeight_1a6b38fd1721594ffc303858e6201d1b2b" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator-&gt;</name></member>
      <member refid="classWeight_1af75080233bdd2e853a5f3b2b80e262af" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator&lt;</name></member>
      <member refid="classWeight_1a5fa6fc187426e2cc6aa40f7acddf8455" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__weight_1ga548aadee137a6c274aeb1e56607b05dd" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator=</name></member>
      <member refid="classWeight_1a2908b386adb4cbc893dcf9f631b8a85d" prot="public" virt="non-virtual"><scope>Weight</scope><name>operator==</name></member>
      <member refid="group__weight_1ga0f92a47af6c72b59183835d0b11a3d60" prot="protected" virt="non-virtual"><scope>Weight</scope><name>print</name></member>
      <member refid="group__weight_1gaeb6c4f1cf187978576df2bc31a5e5eb8" prot="public" virt="non-virtual"><scope>Weight</scope><name>save_to_string</name></member>
      <member refid="group__weight_1ga5d63ead0a1d21ee5628c643fca773903" prot="public" virt="non-virtual"><scope>Weight</scope><name>scalar</name></member>
      <member refid="group__weight_1gab3a3a5fb989514e5673582b9a7107d97" prot="protected" virt="non-virtual"><scope>Weight</scope><name>smaller</name></member>
      <member refid="group__weight_1ga2185b6a5b1957fcab19bf6281adeed47" prot="public" virt="non-virtual"><scope>Weight</scope><name>unknown</name></member>
      <member refid="classWeight_1ac33fb795eaee8c56d2e4179020a0d2eb" prot="public" virt="non-virtual"><scope>Weight</scope><name>Weight</name></member>
      <member refid="group__weight_1ga9283a1d2c4b91605a0c60a2c7033cb2c" prot="public" virt="non-virtual"><scope>Weight</scope><name>Weight</name></member>
      <member refid="group__weight_1gad0c93ac5f963b02ca3f6c1d5d02f5d61" prot="public" virt="non-virtual"><scope>Weight</scope><name>zero</name></member>
      <member refid="group__weight_1gaf09ef86cb7c7b833cd3ea327f153543f" prot="public" virt="non-virtual"><scope>Weight</scope><name>~Weight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
