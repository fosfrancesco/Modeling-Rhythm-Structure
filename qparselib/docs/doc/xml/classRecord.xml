<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classRecord" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Record</compoundname>
    <derivedcompoundref refid="classBrecord" prot="public" virt="non-virtual">Brecord&lt; P &gt;</derivedcompoundref>
    <derivedcompoundref refid="classKrecord" prot="public" virt="non-virtual">Krecord&lt; P &gt;</derivedcompoundref>
    <includes local="no">Record.hpp</includes>
    <templateparamlist>
      <param>
        <type>class P</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classRecord_1a9b17378a46d2026b86632728f820d804" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Record&lt; P &gt;::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
<para>state - possible values: 0 : empty (record just created no run was stored) 1 : add(_key) was not called but add(p) was called for p partial and subsuming _key 2 : add(_key) was called 3 : some run has been stored but we are not in 1 or 2. should not happen. </para>
        </briefdescription>
        <detaileddescription>
<para>The state is not changed inside the <ref refid="classRecord" kindref="compound">Record</ref> class. It is changed by callers (table.add). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="75" column="1" bodyfile="src/table/Record.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classRecord_1abf6ea6cd82f35b05f70222bd3fdeefba" prot="protected" static="no" mutable="no">
        <type>P</type>
        <definition>P Record&lt; P &gt;::_key</definition>
        <argsstring></argsstring>
        <name>_key</name>
        <briefdescription>
<para>copy of the key associated to the record in container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="80" column="1" bodyfile="src/table/Record.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRecord_1ab2357a1913c48fa519a7aff23026155f" prot="protected" static="no" mutable="no">
        <type>RunCompare&lt; P &gt;</type>
        <definition>RunCompare&lt;P&gt; Record&lt; P &gt;::_comp</definition>
        <argsstring></argsstring>
        <name>_comp</name>
        <briefdescription>
<para>comparison function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="83" column="1" bodyfile="src/table/Record.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRecord_1a25d3afd2df62895c4768d6a520fd174a" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Record&lt; P &gt;::_nb_cand</definition>
        <argsstring></argsstring>
        <name>_nb_cand</name>
        <briefdescription>
<para>number of candidate bests constructed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="86" column="1" bodyfile="src/table/Record.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRecord_1ac95357b0115df96cd4b5da99e973880d" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Record&lt; P &gt;::_nb_best_rejected</definition>
        <argsstring></argsstring>
        <name>_nb_best_rejected</name>
        <briefdescription>
<para>number of best not added to the list because of optimization filters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="89" column="1" bodyfile="src/table/Record.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classRecord_1abfb78c84cf6c1a7b932bec064670c35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Record&lt; P &gt;::Record</definition>
        <argsstring>(const P &amp;, RunCompare&lt; P &gt;)</argsstring>
        <name>Record</name>
        <param>
          <type>const P &amp;</type>
        </param>
        <param>
          <type>RunCompare&lt; P &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classRecord_1a33cf3cee78f8b663595f0702f145c9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Record&lt; P &gt;::add</definition>
        <argsstring>(Run&lt; P &gt; *)=0</argsstring>
        <name>add</name>
        <reimplementedby refid="classBrecord_1ac7ec5cf75624a8a05fced677a477d07b">add</reimplementedby>
        <reimplementedby refid="classKrecord_1a7f19d5761c5dd197b845bdd8a2d3bd2a">add</reimplementedby>
        <param>
          <type><ref refid="classRun" kindref="compound">Run</ref>&lt; P &gt; *</type>
        </param>
        <briefdescription>
<para>add a run to the record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classRecord_1a767aeb8c69e0866328fc82e066af7c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classRun" kindref="compound">Run</ref>&lt; P &gt; *</type>
        <definition>virtual Run&lt;P&gt;* Record&lt; P &gt;::best</definition>
        <argsstring>(Atable&lt; P &gt; *table, size_t k=1)=0</argsstring>
        <name>best</name>
        <reimplementedby refid="classBrecord_1a3e9776d16cdc2fd5c169d5599caf7c4b">best</reimplementedby>
        <reimplementedby refid="classKrecord_1a3969af28b4979e3647c149e9f35f21b7">best</reimplementedby>
        <param>
          <type><ref refid="classAtable" kindref="compound">Atable</ref>&lt; P &gt; *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>returns the k-th best run of the record </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>can be used to compute weights of new runs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>rank (as in k-best) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classRecord_1a2432ec9a436061e486512d4201322b10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const P &amp;</type>
        <definition>const P&amp; Record&lt; P &gt;::key</definition>
        <argsstring>()</argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="61" column="1" bodyfile="src/table/Record.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classRecord_1aa3b6e99a13b1b6537d2b6bde3abb2978" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Record&lt; P &gt;::empty</definition>
        <argsstring>() const =0</argsstring>
        <name>empty</name>
        <reimplementedby refid="classBrecord_1ad90c15ea15523176e1db7e6e876e8ea9">empty</reimplementedby>
        <reimplementedby refid="classKrecord_1a2f4146eec2a91b889e1118a30af978ca">empty</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="63" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classRecord_1a6ea298ae02397c6b390ac098f2ed9a66" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Record&lt; P &gt;::valid</definition>
        <argsstring>(Run&lt; P &gt; *)</argsstring>
        <name>valid</name>
        <param>
          <type><ref refid="classRun" kindref="compound">Run</ref>&lt; P &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Record.hpp" line="91" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>abstract class describing the basic functionalities of a record. </para>
    </briefdescription>
    <detaileddescription>
<para>each record is associated to a Ptr it can be filled with add and can be interrogating with best, for retrieving the best runs for the associated Ptr.</para>
<para>when uncomplete runs are added to the record (either by the record or from outside) their weight must be computed using a table.</para>
<para>there are 3 similar kinds of Run* that should not be added in record: TBC should not be returned by best on the record ?<itemizedlist>
<listitem><para>NULL ptr to <ref refid="classRun" kindref="compound">Run</ref></para>
</listitem><listitem><para>ptr to <ref refid="classRun" kindref="compound">Run</ref> with unknown weight (i.e. weight with NULL letter) that case includes null runs.</para>
</listitem><listitem><para>ptr to <ref refid="classRun" kindref="compound">Run</ref> with weight == zero (acc. to test zero()). a <ref refid="classRun" kindref="compound">Run</ref> not in these 3 case is called valid.</para>
</listitem></itemizedlist>
</para>
<para>[update] the runs with weight zero (still invalid) can be added to records but an error message is displayed (for debugging). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="354">
        <label>Krecord&lt; P &gt;</label>
        <link refid="classKrecord"/>
        <childnode refid="352" relation="public-inheritance">
        </childnode>
      </node>
      <node id="353">
        <label>Brecord&lt; P &gt;</label>
        <link refid="classBrecord"/>
        <childnode refid="352" relation="public-inheritance">
        </childnode>
      </node>
      <node id="352">
        <label>Record&lt; P &gt;</label>
        <link refid="classRecord"/>
      </node>
    </inheritancegraph>
    <location file="src/segment/Environment.hpp" line="23" column="1" bodyfile="src/segment/Environment.hpp" bodystart="23" bodyend="-1"/>
    <listofallmembers>
      <member refid="classRecord_1ab2357a1913c48fa519a7aff23026155f" prot="protected" virt="non-virtual"><scope>Record</scope><name>_comp</name></member>
      <member refid="classRecord_1abf6ea6cd82f35b05f70222bd3fdeefba" prot="protected" virt="non-virtual"><scope>Record</scope><name>_key</name></member>
      <member refid="classRecord_1ac95357b0115df96cd4b5da99e973880d" prot="protected" virt="non-virtual"><scope>Record</scope><name>_nb_best_rejected</name></member>
      <member refid="classRecord_1a25d3afd2df62895c4768d6a520fd174a" prot="protected" virt="non-virtual"><scope>Record</scope><name>_nb_cand</name></member>
      <member refid="classRecord_1a33cf3cee78f8b663595f0702f145c9d5" prot="public" virt="pure-virtual"><scope>Record</scope><name>add</name></member>
      <member refid="classRecord_1a767aeb8c69e0866328fc82e066af7c3b" prot="public" virt="pure-virtual"><scope>Record</scope><name>best</name></member>
      <member refid="classRecord_1aa3b6e99a13b1b6537d2b6bde3abb2978" prot="public" virt="pure-virtual"><scope>Record</scope><name>empty</name></member>
      <member refid="classRecord_1a2432ec9a436061e486512d4201322b10" prot="public" virt="non-virtual"><scope>Record</scope><name>key</name></member>
      <member refid="classRecord_1abfb78c84cf6c1a7b932bec064670c35c" prot="public" virt="non-virtual"><scope>Record</scope><name>Record</name></member>
      <member refid="classRecord_1a9b17378a46d2026b86632728f820d804" prot="public" virt="non-virtual"><scope>Record</scope><name>state</name></member>
      <member refid="classRecord_1a6ea298ae02397c6b390ac098f2ed9a66" prot="protected" virt="non-virtual"><scope>Record</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
