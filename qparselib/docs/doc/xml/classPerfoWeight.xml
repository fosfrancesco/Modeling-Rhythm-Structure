<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classPerfoWeight" kind="class" language="C++" prot="public">
    <compoundname>PerfoWeight</compoundname>
    <basecompoundref refid="classViterbiWeight" prot="public" virt="non-virtual">ViterbiWeight</basecompoundref>
    <includes local="no">PerformanceModel.hpp</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="group__weight_1gae16bc47f0638261b5adb86e75b0b99ea" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double PerfoWeight::sq2</definition>
        <argsstring></argsstring>
        <name>sq2</name>
        <initializer>= 1.41421356237</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="86" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1ga7c3b577e2ff2b9a7123a189aafba7d0c" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double PerfoWeight::sqpi</definition>
        <argsstring></argsstring>
        <name>sqpi</name>
        <initializer>= 1.772453850905516</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="87" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1gafd108411879ddc15662c8d606b247a47" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::mu</definition>
        <argsstring></argsstring>
        <name>mu</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="89" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1ga786289c571e83cc4a40eadeeb2b7a3da" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::sigma2</definition>
        <argsstring></argsstring>
        <name>sigma2</name>
        <initializer>= <ref refid="group__general_1gae30e96a43768e59d69b30739bca4b2a0" kindref="member">CST_SIGMA2</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="90" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1gaf643b956e521fa4ff76b6f37fd335431" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::sigma</definition>
        <argsstring></argsstring>
        <name>sigma</name>
        <initializer>= sqrt(PerfoWeight::sigma2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="91" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1gaee6c757c9576757ed52d54bbfacff70b" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <initializer>= -4.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="92" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1ga1dc0d90f595e84924c6b7d2b4bebe29c" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <initializer>= 4.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="93" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__weight_1ga1df7c2e2eb56fc20cbfe12853df48f28" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::Z</definition>
        <argsstring></argsstring>
        <name>Z</name>
        <initializer>= sq2 * sqpi * sigma * erf(b/(sq2 * sigma))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="94" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPerfoWeight_1a154cb5b2c212aa909a0ca701eeb83c9e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PerfoWeight::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="96" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPerfoWeight_1a37edc602ff52c15e3a3306935c4f7f2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PerfoWeight::PerfoWeight</definition>
        <argsstring>(double v)</argsstring>
        <name>PerfoWeight</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="37" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaa4edfc478ea676a169bd5b58b82ff352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PerfoWeight::PerfoWeight</definition>
        <argsstring>(const InputSegment *s, const AlignedInterval *p, pre_t pre=0, pre_t post=0)</argsstring>
        <name>PerfoWeight</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classAlignedInterval" kindref="compound">AlignedInterval</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>probability of positions in the given alignement in the interval defined by the given path. </para>
        </briefdescription>
        <detaileddescription>
<para>= product of the probabilities for the points in the alignement,<itemizedlist>
<listitem><para>the pre points on the left bound</para>
</listitem><listitem><para>the post rightmost points in the right half of the alignment </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="51" column="1" bodyfile="src/weight/PerformanceModel.cpp" bodystart="99" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga00a9b370fb237b3230cbce5cf9d8fe41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPerfoWeight" kindref="compound">PerfoWeight</ref> &amp;</type>
        <definition>PerfoWeight &amp; PerfoWeight::operator=</definition>
        <argsstring>(const PerfoWeight &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classPerfoWeight" kindref="compound">PerfoWeight</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="55" column="1" bodyfile="src/weight/PerformanceModel.cpp" bodystart="158" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaabb75d1419be3bb59dcdd3b8e56b0e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPerfoWeight" kindref="compound">PerfoWeight</ref> &amp;</type>
        <definition>PerfoWeight &amp; PerfoWeight::operator=</definition>
        <argsstring>(const LetterWeight &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classLetterWeight" kindref="compound">LetterWeight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <ref refid="classPerfoWeight" kindref="compound">PerfoWeight</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="58" column="1" bodyfile="src/weight/PerformanceModel.cpp" bodystart="167" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classPerfoWeight_1aadcab66aee485f9f0a9802b265831598" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PerfoWeight::~PerfoWeight</definition>
        <argsstring>()</argsstring>
        <name>~PerfoWeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="61" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classPerfoWeight_1a8023bda84f8e883bbad23b31c1ccdd0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPerfoWeight" kindref="compound">PerfoWeight</ref> *</type>
        <definition>PerfoWeight* PerfoWeight::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="group__weight_1ga315ec4d2ce14bcdea7b8a3d0c9d278ef">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPerfoWeight_1ad9237d9b3fccf6f0b70133e10c1103b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>virtual Weight PerfoWeight::make</definition>
        <argsstring>(double v) const</argsstring>
        <name>make</name>
        <reimplements refid="classViterbiWeight_1a8b4676e41a4edb2cc5466d1e8cb1059a">make</reimplements>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>factory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a weight of same type as this letter, initialized with given value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="65" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classPerfoWeight_1a170351b18fd33ea7753d8b82eb83ae9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PerfoWeight::hasType</definition>
        <argsstring>(std::string code) const</argsstring>
        <name>hasType</name>
        <reimplements refid="classViterbiWeight_1a115d43704bf01603dad9cda0d28292bf">hasType</reimplements>
        <param>
          <type>std::string</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>type code is still &quot;ViterbiWeight&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="69" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="69" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="group__weight_1ga6761f06ee3b129a22fc0101f4947b4e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PerfoWeight::set_sigma2</definition>
        <argsstring>(double)</argsstring>
        <name>set_sigma2</name>
        <param>
          <type>double</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="72" column="1" bodyfile="src/weight/PerformanceModel.cpp" bodystart="186" bodyend="191"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classPerfoWeight_1a62a4cc4811e1d20cb8fc373cffd063a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const PerfoWeight &amp;rhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classPerfoWeight" kindref="compound">PerfoWeight</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="74" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="74" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="group__weight_1ga3661d1533628116f3581a8c0ac82c221" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PerfoWeight::trnorm</definition>
        <argsstring>(double x)</argsstring>
        <name>trnorm</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Gaussian pr. density distribution truncated to [a,b]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/PerformanceModel.hpp" line="99" column="1" bodyfile="src/weight/PerformanceModel.cpp" bodystart="194" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>extention of <ref refid="classViterbiWeight" kindref="compound">ViterbiWeight</ref> with a model of performance. </para>
    </briefdescription>
    <detaileddescription>
<para>compute probabilities of alignement of input points to a score following a truncated Gaussian distribution with parameters mu (default 0) and sigma (default 1) and is truncated on the interval [a,b] (values in samples) and shifted. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="312">
        <label>ViterbiWeight</label>
        <link refid="classViterbiWeight"/>
        <childnode refid="313" relation="public-inheritance">
        </childnode>
      </node>
      <node id="313">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="311">
        <label>PerfoWeight</label>
        <link refid="classPerfoWeight"/>
        <childnode refid="312" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="315">
        <label>ViterbiWeight</label>
        <link refid="classViterbiWeight"/>
        <childnode refid="316" relation="public-inheritance">
        </childnode>
      </node>
      <node id="316">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="314">
        <label>PerfoWeight</label>
        <link refid="classPerfoWeight"/>
        <childnode refid="315" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/weight/PerformanceModel.hpp" line="34" column="1" bodyfile="src/weight/PerformanceModel.hpp" bodystart="33" bodyend="111"/>
    <listofallmembers>
      <member refid="classViterbiWeight_1a0e70b1bda371ba1887ea71e5ff5f91bf" prot="protected" virt="non-virtual"><scope>PerfoWeight</scope><name>_val</name></member>
      <member refid="group__weight_1gaee6c757c9576757ed52d54bbfacff70b" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>a</name></member>
      <member refid="group__weight_1ga009b0216c58308f81497e4aabe49aaed" prot="protected" virt="virtual"><scope>PerfoWeight</scope><name>add</name></member>
      <member refid="group__weight_1ga1dc0d90f595e84924c6b7d2b4bebe29c" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>b</name></member>
      <member refid="classPerfoWeight_1a8023bda84f8e883bbad23b31c1ccdd0b" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>clone</name></member>
      <member refid="group__weight_1ga96f4c23e4845b232451e99b648bddfd6" prot="protected" virt="virtual"><scope>PerfoWeight</scope><name>equal</name></member>
      <member refid="classViterbiWeight_1a5009d22fc226821a8dfd876ed9bd9e84" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>get_one</name></member>
      <member refid="classViterbiWeight_1af7655a0c00c0af95699e186ceec25a7e" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>get_zero</name></member>
      <member refid="classPerfoWeight_1a170351b18fd33ea7753d8b82eb83ae9e" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>hasType</name></member>
      <member refid="group__weight_1ga1fa4dd503a5f4915df2f9c5663aeeaeb" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>invert</name></member>
      <member refid="classLetterWeight_1a2f9af55d38b8e7fd73af6cbbcb50971c" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>LetterWeight</name></member>
      <member refid="classLetterWeight_1adaab28cd9be9b7ef9164bf3b33c58815" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>LetterWeight</name></member>
      <member refid="classPerfoWeight_1ad9237d9b3fccf6f0b70133e10c1103b2" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>make</name></member>
      <member refid="classViterbiWeight_1a175ce9e3ea9e87e8a28f34c4655544be" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>make_one</name></member>
      <member refid="classViterbiWeight_1a4906fd4ccbcbf5a9617d40a73afd778b" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>make_zero</name></member>
      <member refid="group__weight_1gafd108411879ddc15662c8d606b247a47" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>mu</name></member>
      <member refid="group__weight_1ga842377ca8ad5fa73cc9787fa97e88635" prot="protected" virt="virtual"><scope>PerfoWeight</scope><name>mult</name></member>
      <member refid="group__weight_1ga01383c055ca0dafc28870ecd701dbd15" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>norm</name></member>
      <member refid="group__weight_1ga31f697ce8283cf19cd1b2f9520c83cde" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>one</name></member>
      <member refid="classPerfoWeight_1a62a4cc4811e1d20cb8fc373cffd063a8" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__weight_1ga00a9b370fb237b3230cbce5cf9d8fe41" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>operator=</name></member>
      <member refid="group__weight_1gaabb75d1419be3bb59dcdd3b8e56b0e63" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>operator=</name></member>
      <member refid="group__weight_1ga388bdd81eafaa3cb729934f36f603f35" prot="public" virt="non-virtual" ambiguityscope="ViterbiWeight::"><scope>PerfoWeight</scope><name>operator=</name></member>
      <member refid="classPerfoWeight_1a37edc602ff52c15e3a3306935c4f7f2a" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>PerfoWeight</name></member>
      <member refid="group__weight_1gaa4edfc478ea676a169bd5b58b82ff352" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>PerfoWeight</name></member>
      <member refid="group__weight_1gad54ea0c48179932f2b8e553f5e3ade51" prot="protected" virt="virtual"><scope>PerfoWeight</scope><name>print</name></member>
      <member refid="group__weight_1ga9b7f93efd61f58a88d9274a9e12ebe36" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>scalar</name></member>
      <member refid="classPerfoWeight_1a154cb5b2c212aa909a0ca701eeb83c9e" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>scale</name></member>
      <member refid="group__weight_1ga6761f06ee3b129a22fc0101f4947b4e9" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>set_sigma2</name></member>
      <member refid="group__weight_1gaf643b956e521fa4ff76b6f37fd335431" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>sigma</name></member>
      <member refid="group__weight_1ga786289c571e83cc4a40eadeeb2b7a3da" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>sigma2</name></member>
      <member refid="group__weight_1ga54f4048f888a9432f02bc0d9f25257c1" prot="protected" virt="virtual"><scope>PerfoWeight</scope><name>smaller</name></member>
      <member refid="group__weight_1gae16bc47f0638261b5adb86e75b0b99ea" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>sq2</name></member>
      <member refid="group__weight_1ga7c3b577e2ff2b9a7123a189aafba7d0c" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>sqpi</name></member>
      <member refid="group__weight_1ga3661d1533628116f3581a8c0ac82c221" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>trnorm</name></member>
      <member refid="group__weight_1gad7ca8b9082125f4ac2f9f562685517a9" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>ViterbiWeight</name></member>
      <member refid="group__weight_1gaf4e626612999673b8e4e0a322119402c" prot="protected" virt="non-virtual"><scope>PerfoWeight</scope><name>ViterbiWeight</name></member>
      <member refid="group__weight_1ga1df7c2e2eb56fc20cbfe12853df48f28" prot="private" virt="non-virtual"><scope>PerfoWeight</scope><name>Z</name></member>
      <member refid="group__weight_1ga35f29b2dcd594cc2cfac884322095c16" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>zero</name></member>
      <member refid="classLetterWeight_1a953daf9c03224b05f6e4deae78100e53" prot="public" virt="virtual"><scope>PerfoWeight</scope><name>~LetterWeight</name></member>
      <member refid="classPerfoWeight_1aadcab66aee485f9f0a9802b265831598" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>~PerfoWeight</name></member>
      <member refid="classViterbiWeight_1ad24850a46f10b4abb94dec4b675b2e69" prot="public" virt="non-virtual"><scope>PerfoWeight</scope><name>~ViterbiWeight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
