<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classPointer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Pointer</compoundname>
    <derivedcompoundref refid="classSpointer" prot="public" virt="non-virtual">Spointer</derivedcompoundref>
    <includes local="no">Ptr.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPointer_1a2a45530c7efca1b398d90a773fdb3c70" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::has_S</definition>
        <argsstring>() const</argsstring>
        <name>has_S</name>
        <reimplementedby refid="classSpointer_1aec852b63ae9427911ff290979bc0a4b4">has_S</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="155" column="1" bodyfile="src/table/Ptr.hpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a66999c2d23c4b592228f1e74a96e0315" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::has_K</definition>
        <argsstring>() const</argsstring>
        <name>has_K</name>
        <reimplementedby refid="classSKIPpointer_1aec99858a74fb6a7b15975d3e65f79c31">has_K</reimplementedby>
        <reimplementedby refid="classSKpointer_1afe3aef0a71afa0e6d022c52aa0f28163">has_K</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="156" column="1" bodyfile="src/table/Ptr.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a7018d6fde0393288fbd7ed5c1ffe9e5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::has_I</definition>
        <argsstring>() const</argsstring>
        <name>has_I</name>
        <reimplementedby refid="classSIpointer_1a4cb39a0c156f3b09eb15feb12dad2434">has_I</reimplementedby>
        <reimplementedby refid="classSIPpointer_1a1166ddc463561929c52bc12f6cd47bca">has_I</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="157" column="1" bodyfile="src/table/Ptr.hpp" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a96063327a69b47d288f345b0d2f4b42b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::has_P</definition>
        <argsstring>() const</argsstring>
        <name>has_P</name>
        <reimplementedby refid="classSIpointer_1a433d1c2fbb2e79b7f0ada6b424739bec">has_P</reimplementedby>
        <reimplementedby refid="classSIPpointer_1a251168384b826897585f182320d4d8ac">has_P</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="158" column="1" bodyfile="src/table/Ptr.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a3fa3fb5df21abf35c02c321611d85a3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::complete</definition>
        <argsstring>() const =0</argsstring>
        <name>complete</name>
        <reimplementedby refid="group__table_1gace5bd2026fef480084f3cc5dc28086f3">complete</reimplementedby>
        <reimplementedby refid="group__table_1ga638627bc96caa0f1dbf7093f0f70951b">complete</reimplementedby>
        <reimplementedby refid="group__table_1ga2f95b5a2058b20744a00737b1240bc83">complete</reimplementedby>
        <briefdescription>
<para>the pointer is complete i.e. all fields are set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1aa682c210e4ae3ef7268db1ee5bcf9f9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Pointer::partial</definition>
        <argsstring>() const</argsstring>
        <name>partial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="167" column="1" bodyfile="src/table/Ptr.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a8ded051c871b7fccfb6b2a20b8920cab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Pointer::rank</definition>
        <argsstring>() const</argsstring>
        <name>rank</name>
        <reimplementedby refid="classSKIPpointer_1a9c89c0ff929c37399870880fb448de98">rank</reimplementedby>
        <reimplementedby refid="classSKpointer_1ae7afb64da3fbb9fc0487913f3ee594a3">rank</reimplementedby>
        <briefdescription>
<para>return the rank of best (k) pointed. default is 1. redefine for classes for k-best parsing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="172" column="1" bodyfile="src/table/Ptr.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a51529c3e4714cafc28ba07da36078618" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::divisible</definition>
        <argsstring>() const</argsstring>
        <name>divisible</name>
        <reimplementedby refid="group__table_1ga54817fbae1688dab4dfff5724e762640">divisible</reimplementedby>
        <reimplementedby refid="group__table_1gac83e0619c17ce4efd589f73513706a6b">divisible</reimplementedby>
        <briefdescription>
<para>return wether it is worth descending (dividing) from this pointer. the result may differ according to whether this pointer has a <ref refid="classWTA" kindref="compound">WTA</ref> state or a Meta state. For instance: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>for <ref refid="classWTA" kindref="compound">WTA</ref> state: it is not worth when this pointer corresponds to an input sub-segment not inhabited.</para>
</listitem><listitem><para>for Meta state: it is not worth if this ptr corresponds to an empty segment. default true. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="184" column="1" bodyfile="src/table/Ptr.hpp" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a02c73f5f2b21a1fe37b744383508cb64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Pointer::incr</definition>
        <argsstring>()</argsstring>
        <name>incr</name>
        <reimplementedby refid="group__table_1gac0c72ab0a91e652b38eb815206b0baa4">incr</reimplementedby>
        <reimplementedby refid="group__table_1ga560a9c964dcc9ad7631213d6ad061a2a">incr</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="186" column="1" bodyfile="src/table/Ptr.hpp" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a7b636072b492b57efe3ead47e03a67bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::compatible</definition>
        <argsstring>(const label_t, bool abstract=true) const</argsstring>
        <name>compatible</name>
        <reimplementedby refid="group__table_1gaca7d3c4d141ecf2874a5e5512e0c02ff">compatible</reimplementedby>
        <reimplementedby refid="group__table_1gabf87df773f8e0f628e0bae79e88097db">compatible</reimplementedby>
        <param>
          <type>const <ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        </param>
        <param>
          <type>bool</type>
          <declname>abstract</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>return wether this pointer is compatible with the given label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abstract</parametername>
</parameternamelist>
<parameterdescription>
<para>if flag is true (default), the label is supposed abstract (label of terminal transition). if abstract flag is false, the label is supposed concrete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Label.hpp for def. abstract/concrete labels </para>
</simplesect>
<simplesect kind="return"><para>default return true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="211" column="1" bodyfile="src/table/Ptr.hpp" bodystart="211" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1afa7a38cfee7181aa05e3634a15066135" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Pointer::dummy</definition>
        <argsstring>() const =0</argsstring>
        <name>dummy</name>
        <reimplementedby refid="group__table_1ga0a994ec6827ef23556b500382fc5a1fc">dummy</reimplementedby>
        <reimplementedby refid="group__table_1ga555753e41af94ac201a0c8c99babb83b">dummy</reimplementedby>
        <reimplementedby refid="group__table_1gaf830b0bf9d24b53e4674de49308b7853">dummy</reimplementedby>
        <briefdescription>
<para>return whether this pointer is a dummy pointer i.e. it was constructed with P() default false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPointer_1a767e1ca8f18a9cf07eaca5ae44f689cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        <definition>virtual label_t Pointer::label</definition>
        <argsstring>(const Transition &amp;t) const =0</argsstring>
        <name>label</name>
        <reimplementedby refid="group__table_1ga15067ad809b5ac25b45c0187550e0b17">label</reimplementedby>
        <reimplementedby refid="group__table_1ga6bdbea8e7013194f834be17932efe642">label</reimplementedby>
        <reimplementedby refid="group__table_1ga7f7cd8ae86d71b147fc662d3cc4977c0">label</reimplementedby>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>return a concrete label value corresponding to this pointer when considered as a leaf position, using the label of the given transition. the given transition must be terminal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga4ca596fe52abd36d550a10818678d54c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Pointer::terminalWeight</definition>
        <argsstring>(const InputSegment *, const Transition &amp;) const</argsstring>
        <name>terminalWeight</name>
        <reimplementedby refid="group__table_1ga6b46b59b3b465ba6a995f76ff34970ce">terminalWeight</reimplementedby>
        <reimplementedby refid="group__table_1ga01caac75d66ff2e272a248c7e1954415">terminalWeight</reimplementedby>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>tr</defname>
        </param>
        <briefdescription>
<para>return the weight for a terminal <ref refid="classRun" kindref="compound">Run</ref> associated to the given <ref refid="classTransition" kindref="compound">Transition</ref>. The transition must be terminal. This pointer must be compatible with the <ref refid="classTransition" kindref="compound">Transition</ref>. input segment can be NULL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="231" column="1" bodyfile="src/table/Ptr.cpp" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gad709430d698804267807f12deba9952b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Pointer::innerWeight</definition>
        <argsstring>(const Transition &amp;) const</argsstring>
        <name>innerWeight</name>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>tr</defname>
        </param>
        <briefdescription>
<para>return the initial weight for an inner <ref refid="classRun" kindref="compound">Run</ref> associated to the given <ref refid="classTransition" kindref="compound">Transition</ref>. the weight will have to be multiplied with all the weights of subruns. the transition must be inner. this pointer must be divisible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="238" column="1" bodyfile="src/table/Ptr.cpp" bodystart="25" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>abstract class defining a signature for a class of pointer to best runs. </para>
    </briefdescription>
    <detaileddescription>
<para><heading level="4">constructors</heading>
</para>
<para>Every concrete subclass P (descendant) must implement the following generic constructors and class-specific operators. they are called by the templates <ref refid="classTable" kindref="compound">Table</ref> and <ref refid="classRun" kindref="compound">Run</ref>. Some use the encapsulator <ref refid="classEnvironment" kindref="compound">Environment</ref>.</para>
<para><programlisting><codeline><highlight class="normal">P()</highlight></codeline>
</programlisting> dummy ptr (unique - can not be produced by other constructors).</para>
<para><programlisting><codeline><highlight class="normal">P(label_t<sp/>s)</highlight></codeline>
</programlisting> fake ptr containing only a label symbol to act as (singleton) body of a terminal runs. the label symbol is concrete (see Label.hpp). also used for P(state_t) -&gt; confusion types state_t &amp; label_t</para>
<para><programlisting><codeline><highlight class="normal">P(Environment*<sp/>env,<sp/>const<sp/>&amp;P<sp/>p,<sp/>size_t<sp/>a,<sp/>size_t<sp/>i,<sp/>state_t<sp/>s)</highlight></codeline>
</programlisting> sub-pointer or instance as leaf s must be a wta state (e.g. initial state of wta) there are 2 cases according to a:<orderedlist>
<listitem><para>if a = 0 : construct a copy of p instanciated as a leaf with label s. i must be 0, p must be partial p must be compatible with s (s = leaf symbol in this case).</para>
</listitem><listitem><para>if a &gt; 0 i must be in [0..a] p must be divisible p can have a meta state (meta run with a=2) or a wta state with i=0, construct the head of a run (in general a copy of p but not always) with 0 &lt; i &lt;= a, construct a pointer for the ith children of a run. the details and specific pre-conditions are described in every class P.</para>
</listitem></orderedlist>
</para>
<para><programlisting><codeline><highlight class="normal">P(const<sp/>&amp;P<sp/>p)</highlight></codeline>
</programlisting> copy</para>
<para><programlisting><codeline><highlight class="normal">P(const<sp/>&amp;P<sp/>p,<sp/>const<sp/>&amp;P<sp/>p0,<sp/>const<sp/>&amp;P<sp/>p1)</highlight></codeline>
</programlisting> instance as parent p must be partial p0 must be complete p1 must be complete Construct a copy of p instanciated as an target node of run with p0 as first child and p1 as last child.</para>
<para><programlisting><codeline><highlight class="normal">P(const<sp/>&amp;P<sp/>p0,<sp/>const<sp/>&amp;P<sp/>p1)</highlight></codeline>
</programlisting> instance as next sibling p0 must be complete p1 must be partial p1 must be instanciable into a successor sibling of p0. Construct a copy of p1 instanciated as the next sibling of p0.</para>
<para><programlisting><codeline><highlight class="normal">virtual<sp/>P&amp;<sp/>operator=<sp/>(const<sp/>P&amp;<sp/>p)<sp/>=<sp/>0;</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">virtual<sp/>bool<sp/>operator==(const<sp/>P&amp;<sp/>p)<sp/>const;</highlight></codeline>
</programlisting> for using pointer as key in hash table (unordered multimap)</para>
<para><programlisting><codeline><highlight class="normal">virtual<sp/>bool<sp/>operator&lt;(const<sp/>P&amp;<sp/>p)<sp/>const;</highlight></codeline>
</programlisting> for using pointer as key in search tree (multimap)</para>
<para><programlisting><codeline><highlight class="normal">bool<sp/>instance(const<sp/>P&amp;<sp/>p)</highlight></codeline>
</programlisting> return wether this ptr is an instance of p. if p is complete, then it is equality.</para>
<para><programlisting><codeline><highlight class="normal">bool<sp/>subsume(const<sp/>P&amp;<sp/>p)</highlight></codeline>
</programlisting> inverse of instance return wether p is an instance of this ptr. if this ptr is complete, then it is equality. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="333">
        <label>SIpointer</label>
        <link refid="classSIpointer"/>
        <childnode refid="332" relation="public-inheritance">
        </childnode>
      </node>
      <node id="336">
        <label>SKpointer</label>
        <link refid="classSKpointer"/>
        <childnode refid="332" relation="public-inheritance">
        </childnode>
      </node>
      <node id="331">
        <label>Pointer</label>
        <link refid="classPointer"/>
      </node>
      <node id="335">
        <label>SKIPpointer</label>
        <link refid="classSKIPpointer"/>
        <childnode refid="334" relation="public-inheritance">
        </childnode>
      </node>
      <node id="332">
        <label>Spointer</label>
        <link refid="classSpointer"/>
        <childnode refid="331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="334">
        <label>SIPpointer</label>
        <link refid="classSIPpointer"/>
        <childnode refid="333" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/table/Ptr.hpp" line="123" column="1" bodyfile="src/table/Ptr.hpp" bodystart="122" bodyend="241"/>
    <listofallmembers>
      <member refid="classPointer_1a7b636072b492b57efe3ead47e03a67bd" prot="public" virt="virtual"><scope>Pointer</scope><name>compatible</name></member>
      <member refid="classPointer_1a3fa3fb5df21abf35c02c321611d85a3c" prot="public" virt="pure-virtual"><scope>Pointer</scope><name>complete</name></member>
      <member refid="classPointer_1a51529c3e4714cafc28ba07da36078618" prot="public" virt="virtual"><scope>Pointer</scope><name>divisible</name></member>
      <member refid="classPointer_1afa7a38cfee7181aa05e3634a15066135" prot="public" virt="pure-virtual"><scope>Pointer</scope><name>dummy</name></member>
      <member refid="classPointer_1a7018d6fde0393288fbd7ed5c1ffe9e5b" prot="public" virt="virtual"><scope>Pointer</scope><name>has_I</name></member>
      <member refid="classPointer_1a66999c2d23c4b592228f1e74a96e0315" prot="public" virt="virtual"><scope>Pointer</scope><name>has_K</name></member>
      <member refid="classPointer_1a96063327a69b47d288f345b0d2f4b42b" prot="public" virt="virtual"><scope>Pointer</scope><name>has_P</name></member>
      <member refid="classPointer_1a2a45530c7efca1b398d90a773fdb3c70" prot="public" virt="virtual"><scope>Pointer</scope><name>has_S</name></member>
      <member refid="classPointer_1a02c73f5f2b21a1fe37b744383508cb64" prot="public" virt="virtual"><scope>Pointer</scope><name>incr</name></member>
      <member refid="group__table_1gad709430d698804267807f12deba9952b" prot="public" virt="virtual"><scope>Pointer</scope><name>innerWeight</name></member>
      <member refid="classPointer_1a767e1ca8f18a9cf07eaca5ae44f689cf" prot="public" virt="pure-virtual"><scope>Pointer</scope><name>label</name></member>
      <member refid="classPointer_1aa682c210e4ae3ef7268db1ee5bcf9f9d" prot="public" virt="non-virtual"><scope>Pointer</scope><name>partial</name></member>
      <member refid="classPointer_1a8ded051c871b7fccfb6b2a20b8920cab" prot="public" virt="virtual"><scope>Pointer</scope><name>rank</name></member>
      <member refid="group__table_1ga4ca596fe52abd36d550a10818678d54c" prot="public" virt="virtual"><scope>Pointer</scope><name>terminalWeight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
