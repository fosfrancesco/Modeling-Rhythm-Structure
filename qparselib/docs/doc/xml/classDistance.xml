<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classDistance" kind="class" language="C++" prot="public">
    <compoundname>Distance</compoundname>
    <basecompoundref refid="classTropicalWeight" prot="public" virt="non-virtual">TropicalWeight</basecompoundref>
    <includes local="no">Distance.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classDistance_1af0d871cc82151e600c043de0765bcb9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Distance::Distance</definition>
        <argsstring>(double d=0.0)</argsstring>
        <name>Distance</name>
        <param>
          <type>double</type>
          <declname>d</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>defaut = null distance - not unknown </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="35" column="1" bodyfile="src/weight/Distance.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga4ebd2ecbdf6955d1ed9064d391cc71b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Distance::Distance</definition>
        <argsstring>(const InputSegment *s, const AlignedInterval *p)</argsstring>
        <name>Distance</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classAlignedInterval" kindref="compound">AlignedInterval</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>weight which is the distance defined by alignment for input segment not unknown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="39" column="1" bodyfile="src/weight/Distance.cpp" bodystart="14" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classDistance_1ae27d1f8eca9cda4e4435c933e94daa53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Distance::Distance</definition>
        <argsstring>(const Distance &amp;d)</argsstring>
        <name>Distance</name>
        <param>
          <type>const <ref refid="classDistance" kindref="compound">Distance</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="41" column="1" bodyfile="src/weight/Distance.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classDistance_1a933d4ecca7e420ac53945e36d64e9500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Distance::~Distance</definition>
        <argsstring>()</argsstring>
        <name>~Distance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="43" column="1" bodyfile="src/weight/Distance.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaf54b8155e1a7652461400d4dd0a5739f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDistance" kindref="compound">Distance</ref> &amp;</type>
        <definition>Distance &amp; Distance::operator=</definition>
        <argsstring>(const Distance &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classDistance" kindref="compound">Distance</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="45" column="1" bodyfile="src/weight/Distance.cpp" bodystart="155" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gafb8da4bc0d0e23217ecad4c219d9a610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classDistance" kindref="compound">Distance</ref> *</type>
        <definition>Distance * Distance::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classLetterWeight_1a23cdcf32e0f0782dbb33b2a65cf9de77">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="47" column="1" bodyfile="src/weight/Distance.cpp" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classDistance_1a1fe45f762afff378c46f81d6199a14ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>virtual Weight Distance::make</definition>
        <argsstring>(double v) const</argsstring>
        <name>make</name>
        <reimplements refid="classTropicalWeight_1abc00c8fe56beedff6b7192325833d6d3">make</reimplements>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>value must be positive</para>
</simplesect>
<xrefsect id="todo_1_todo000038"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR : stricly positive </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="49" column="1" bodyfile="src/weight/Distance.hpp" bodystart="49" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classDistance_1affe4a5bab7ca33e5119d3f93484dccb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>virtual Weight Distance::get_zero</definition>
        <argsstring>() const</argsstring>
        <name>get_zero</name>
        <reimplements refid="classTropicalWeight_1a8de59f3233cfd822712b04d6069f5256">get_zero</reimplements>
        <briefdescription>
<para>return the neutral element for add (absorbing element for mult) wrapped in a <ref refid="classWeight" kindref="compound">Weight</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="55" column="1" bodyfile="src/weight/Distance.hpp" bodystart="55" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classDistance_1a8aac0a94a73b60ef2bf566eb59a3e704" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>virtual Weight Distance::get_one</definition>
        <argsstring>() const</argsstring>
        <name>get_one</name>
        <reimplements refid="classTropicalWeight_1a62d1dc9815ba6ba04665047ba6581731">get_one</reimplements>
        <briefdescription>
<para>return the neutral element for mult wrapped in a <ref refid="classWeight" kindref="compound">Weight</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="61" column="1" bodyfile="src/weight/Distance.hpp" bodystart="61" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classDistance_1aaee519eac86eeda240033a255a50d806" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>static Weight Distance::make_zero</definition>
        <argsstring>()</argsstring>
        <name>make_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="52" column="1" bodyfile="src/weight/Distance.hpp" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classDistance_1afbe094e5ca408d7168f18a78b809a193" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>static Weight Distance::make_one</definition>
        <argsstring>()</argsstring>
        <name>make_one</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="58" column="1" bodyfile="src/weight/Distance.hpp" bodystart="58" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="group__weight_1gaf9785af97fcce45a15098363efe5b7c8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Distance::print</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print</name>
        <reimplements refid="group__weight_1gaa6f92a288b315fed3b301de728f2717d">print</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <defname>o</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="71" column="1" bodyfile="src/weight/Distance.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__weight_1gae22f0c2d151a20073571c25e47ca84a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Distance::dist_prev</definition>
        <argsstring>(const InputSegment *s, size_t j)</argsstring>
        <name>dist_prev</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>distance to the closest point before j not at the same rdate as j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="88" column="1" bodyfile="src/weight/Distance.cpp" bodystart="117" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1gaf87f2d4066d9a8403b7a149cc2dc9a20" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Distance::dist_next</definition>
        <argsstring>(const InputSegment *s, size_t j)</argsstring>
        <name>dist_next</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>distance to the closest point after j not at the same rdate as j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="91" column="1" bodyfile="src/weight/Distance.cpp" bodystart="137" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__weight_1ga076cdb529e76ef7cd5715c451f50c1df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Distance::distcoeff</definition>
        <argsstring>(const InputSegment *s, size_t j)</argsstring>
        <name>distcoeff</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>sum of the 2 above or 1 if sum is null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/weight/Distance.hpp" line="94" column="1" bodyfile="src/weight/Distance.cpp" bodystart="73" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>concrete <ref refid="classWeight" kindref="compound">Weight</ref> domain identical to <ref refid="classTropicalWeight" kindref="compound">TropicalWeight</ref> with an additional constructor to compute a distance value from an Alignement, obtained as the sum of the pointwise distances. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>a <ref refid="classDistance" kindref="compound">Distance</ref> hasType &quot;TropicalWeight&quot;</para>
</simplesect>
ALT: implement as vector of pointwise distances </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="55">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="53">
        <label>Distance</label>
        <link refid="classDistance"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>TropicalWeight</label>
        <link refid="classTropicalWeight"/>
        <childnode refid="55" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="58">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="56">
        <label>Distance</label>
        <link refid="classDistance"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>TropicalWeight</label>
        <link refid="classTropicalWeight"/>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>penalty</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/weight/Distance.hpp" line="32" column="1" bodyfile="src/weight/Distance.hpp" bodystart="31" bodyend="95"/>
    <listofallmembers>
      <member refid="classTropicalWeight_1a8b8b7de0bd57c28630fb978daceeeffb" prot="protected" virt="non-virtual"><scope>Distance</scope><name>_val</name></member>
      <member refid="group__weight_1ga41791f144fea9717092970563337d040" prot="protected" virt="virtual"><scope>Distance</scope><name>add</name></member>
      <member refid="group__weight_1gafb8da4bc0d0e23217ecad4c219d9a610" prot="public" virt="virtual"><scope>Distance</scope><name>clone</name></member>
      <member refid="group__weight_1gaf87f2d4066d9a8403b7a149cc2dc9a20" prot="private" virt="non-virtual"><scope>Distance</scope><name>dist_next</name></member>
      <member refid="group__weight_1gae22f0c2d151a20073571c25e47ca84a3" prot="private" virt="non-virtual"><scope>Distance</scope><name>dist_prev</name></member>
      <member refid="classDistance_1af0d871cc82151e600c043de0765bcb9d" prot="public" virt="non-virtual"><scope>Distance</scope><name>Distance</name></member>
      <member refid="group__weight_1ga4ebd2ecbdf6955d1ed9064d391cc71b7" prot="public" virt="non-virtual"><scope>Distance</scope><name>Distance</name></member>
      <member refid="classDistance_1ae27d1f8eca9cda4e4435c933e94daa53" prot="public" virt="non-virtual"><scope>Distance</scope><name>Distance</name></member>
      <member refid="group__weight_1ga076cdb529e76ef7cd5715c451f50c1df" prot="private" virt="non-virtual"><scope>Distance</scope><name>distcoeff</name></member>
      <member refid="group__weight_1ga7203d6028f02a2791bdeede99ef59b97" prot="protected" virt="virtual"><scope>Distance</scope><name>equal</name></member>
      <member refid="classDistance_1a8aac0a94a73b60ef2bf566eb59a3e704" prot="public" virt="virtual"><scope>Distance</scope><name>get_one</name></member>
      <member refid="classDistance_1affe4a5bab7ca33e5119d3f93484dccb3" prot="public" virt="virtual"><scope>Distance</scope><name>get_zero</name></member>
      <member refid="group__weight_1ga739a8c09964d0db9552f5924b494c89d" prot="public" virt="non-virtual"><scope>Distance</scope><name>gracenote</name></member>
      <member refid="classTropicalWeight_1a276bcd4dd3d61887d1628e63665edd7e" prot="public" virt="virtual"><scope>Distance</scope><name>hasType</name></member>
      <member refid="group__weight_1gace00a414884a9a4824c3cac4b8b084a9" prot="public" virt="non-virtual"><scope>Distance</scope><name>inner</name></member>
      <member refid="group__weight_1ga2bad107be8a2e71fc12b75196adde070" prot="public" virt="virtual"><scope>Distance</scope><name>invert</name></member>
      <member refid="classLetterWeight_1a2f9af55d38b8e7fd73af6cbbcb50971c" prot="public" virt="non-virtual"><scope>Distance</scope><name>LetterWeight</name></member>
      <member refid="classLetterWeight_1adaab28cd9be9b7ef9164bf3b33c58815" prot="public" virt="non-virtual"><scope>Distance</scope><name>LetterWeight</name></member>
      <member refid="classDistance_1a1fe45f762afff378c46f81d6199a14ab" prot="public" virt="virtual"><scope>Distance</scope><name>make</name></member>
      <member refid="classDistance_1afbe094e5ca408d7168f18a78b809a193" prot="public" virt="non-virtual"><scope>Distance</scope><name>make_one</name></member>
      <member refid="classDistance_1aaee519eac86eeda240033a255a50d806" prot="public" virt="non-virtual"><scope>Distance</scope><name>make_zero</name></member>
      <member refid="group__weight_1ga6bf7a669a9798ebbd6b4138cce2bade6" prot="protected" virt="virtual"><scope>Distance</scope><name>mult</name></member>
      <member refid="group__weight_1gabea8959ba2b8538194c3aadf5f9e4941" prot="public" virt="virtual"><scope>Distance</scope><name>norm</name></member>
      <member refid="group__weight_1gae362229d75df663272f4d52c15a04315" prot="public" virt="virtual"><scope>Distance</scope><name>one</name></member>
      <member refid="group__weight_1gaf54b8155e1a7652461400d4dd0a5739f" prot="public" virt="non-virtual"><scope>Distance</scope><name>operator=</name></member>
      <member refid="group__weight_1gaa275b4800bdc220d59ee42b2165f638a" prot="public" virt="non-virtual" ambiguityscope="TropicalWeight::"><scope>Distance</scope><name>operator=</name></member>
      <member refid="group__weight_1ga3aeb0d5a945daa39a0ed9a02fe92f246" prot="public" virt="non-virtual" ambiguityscope="TropicalWeight::"><scope>Distance</scope><name>operator=</name></member>
      <member refid="group__weight_1ga65ae4a5dbff3b9bf3d9972147868fc05" prot="public" virt="non-virtual"><scope>Distance</scope><name>penalty</name></member>
      <member refid="group__weight_1gaf9785af97fcce45a15098363efe5b7c8" prot="protected" virt="virtual"><scope>Distance</scope><name>print</name></member>
      <member refid="group__weight_1ga9b479f4a9f23f4c423729b669aa69dc5" prot="public" virt="virtual"><scope>Distance</scope><name>scalar</name></member>
      <member refid="group__weight_1ga4237553cf4beafd5a96bd0ac7da7ac11" prot="protected" virt="virtual"><scope>Distance</scope><name>smaller</name></member>
      <member refid="group__weight_1gad8d0422a24b5d4a76856191cc441396c" prot="public" virt="non-virtual"><scope>Distance</scope><name>tie</name></member>
      <member refid="group__weight_1ga17f51f13d0338bbcbc76ada716e626aa" prot="public" virt="non-virtual"><scope>Distance</scope><name>TropicalWeight</name></member>
      <member refid="classTropicalWeight_1add8ba82f403d669abe6d7601f003bc77" prot="protected" virt="non-virtual"><scope>Distance</scope><name>TropicalWeight</name></member>
      <member refid="classTropicalWeight_1a09d45439a55d482120356f949c638da5" prot="protected" virt="non-virtual"><scope>Distance</scope><name>TropicalWeight</name></member>
      <member refid="group__weight_1ga55f1e2bcb9e1e3fd521d652a5aebfc36" prot="public" virt="virtual"><scope>Distance</scope><name>zero</name></member>
      <member refid="classDistance_1a933d4ecca7e420ac53945e36d64e9500" prot="public" virt="non-virtual"><scope>Distance</scope><name>~Distance</name></member>
      <member refid="classLetterWeight_1a953daf9c03224b05f6e4deae78100e53" prot="public" virt="virtual"><scope>Distance</scope><name>~LetterWeight</name></member>
      <member refid="classTropicalWeight_1ac1e9e62336532b7362b1b5f79d7e7d7b" prot="public" virt="non-virtual"><scope>Distance</scope><name>~TropicalWeight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
