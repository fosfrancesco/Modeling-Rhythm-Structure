<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classWTA" kind="class" language="C++" prot="public">
    <compoundname>WTA</compoundname>
    <derivedcompoundref refid="classComboWTA" prot="public" virt="non-virtual">ComboWTA</derivedcompoundref>
    <derivedcompoundref refid="classCountingWTA" prot="public" virt="non-virtual">CountingWTA</derivedcompoundref>
    <derivedcompoundref refid="classPreWTA" prot="public" virt="non-virtual">PreWTA</derivedcompoundref>
    <derivedcompoundref refid="classValueWTA" prot="public" virt="non-virtual">ValueWTA</derivedcompoundref>
    <derivedcompoundref refid="classWTAFile" prot="public" virt="non-virtual">WTAFile</derivedcompoundref>
    <includes local="no">WTA.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classWTA_1a529e9db519ca17427d0c6076be54f2a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TransitionList</definition>
        <argsstring></argsstring>
        <name>TransitionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="154" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classWTA_1a02492d7d852ab9e6e2b47096fb5ccc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const WTA &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>o</defname>
        </param>
        <param>
          <type>const <ref refid="classWTA" kindref="compound">WTA</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>write table content to output stream </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="321" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="705" bodyend="719"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classWTA_1a5d8ace9f515a3902d889db560f08f4c5" prot="public" static="no" mutable="no">
        <type>std::set&lt; state_t &gt;</type>
        <definition>std::set&lt;state_t&gt; WTA::initials</definition>
        <argsstring></argsstring>
        <name>initials</name>
        <briefdescription>
<para>set of initial states </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000021"><xreftitle>Todo</xreftitle><xrefdescription><para>SUPPR </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="318" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classWTA_1a0d3422d597fbe64d655d9ced77dd7b8f" prot="protected" static="no" mutable="no">
        <type>std::map&lt; state_t, <ref refid="classTransitionList" kindref="compound">TransitionList</ref> &gt;</type>
        <definition>std::map&lt;state_t, TransitionList&gt; WTA::_table</definition>
        <argsstring></argsstring>
        <name>_table</name>
        <briefdescription>
<para>transition table </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="330" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWTA_1a52dd7c5ad9439670d75df10f2dd1e4df" prot="protected" static="no" mutable="no">
        <type>state_t</type>
        <definition>state_t WTA::_initial</definition>
        <argsstring></argsstring>
        <name>_initial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="332" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWTA_1a76cf3c27412f9d61464a8a82aea97b89" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t WTA::_cpt_tr</definition>
        <argsstring></argsstring>
        <name>_cpt_tr</name>
        <briefdescription>
<para>number of transitions </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="335" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWTA_1a3ed6ca11b3e520485171a0f07deffd21" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t WTA::_cpt_size</definition>
        <argsstring></argsstring>
        <name>_cpt_size</name>
        <briefdescription>
<para>full size (number of occurences of states) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="338" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWTA_1ae6d1c616caceb7819d4d23f4a635cddc" prot="protected" static="no" mutable="no">
        <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
        <definition>pre_t WTA::_max_pre</definition>
        <argsstring></argsstring>
        <name>_max_pre</name>
        <briefdescription>
<para>used only in descendant classes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="341" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWTA_1acb19a9da4f88e4b3538b6889cbd49a08" prot="protected" static="no" mutable="no">
        <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
        <definition>pre_t WTA::_max_post</definition>
        <argsstring></argsstring>
        <name>_max_post</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="342" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWTA_1ad93a124d289cf4d1e2801fccb01ca8ea" prot="protected" static="no" mutable="no">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight WTA::_seed</definition>
        <argsstring></argsstring>
        <name>_seed</name>
        <briefdescription>
<para>arbitrary (polymorphic) weight value. for generation of weights in same domain with get_zero, get_one </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="346" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="346" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classWTA_1ad67d54c742de0f18d8e54e458e7a8089" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t WTA::_next_id</definition>
        <argsstring></argsstring>
        <name>_next_id</name>
        <briefdescription>
<para>counter for creating transition ids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="358" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="358" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__schemata_1ga5636da911ebbe8772c5444172d56800d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WTA::WTA</definition>
        <argsstring>()</argsstring>
        <name>WTA</name>
        <briefdescription>
<para>nullary constructor for cython </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="158" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="85" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga6eeb789b8c8aa8404f611a6fed61faca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WTA::WTA</definition>
        <argsstring>(Weight seed, pre_t pre=0, pre_t post=0)</argsstring>
        <name>WTA</name>
        <param>
          <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>empty automaton </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="161" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaacdee6c2292baea7f712c84a5e205432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WTA::~WTA</definition>
        <argsstring>()</argsstring>
        <name>~WTA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="163" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="102" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classWTA_1a23060c851d5cf624215c2d9dc8ad4b45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool WTA::hasType</definition>
        <argsstring>(std::string code) const</argsstring>
        <name>hasType</name>
        <reimplementedby refid="classCountingWTA_1a4ac4c2d11483cbd40420148e688e9e7f">hasType</reimplementedby>
        <reimplementedby refid="classValueWTA_1a4d5f75a4c4dd74e1b419786c30a3837a">hasType</reimplementedby>
        <reimplementedby refid="classPreWTA_1a0cb0b8f217198e19367d88674605995e">hasType</reimplementedby>
        <reimplementedby refid="classComboWTA_1aa55734ef06970c324a55c31c12655d0f">hasType</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="165" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="165" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gab201fee50d73843159cbef5f453838f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t WTA::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>number of states </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="169" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gada977ff7270308f29852b59f38965bde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WTA::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="171" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga4459bd6654cbe35b39df9cade16c6d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WTA::isRegistered</definition>
        <argsstring>(state_t) const</argsstring>
        <name>isRegistered</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>the state is present in the automaton </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="174" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga88d07a1e47cc3ee537234861b7336dd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WTA::isInitial</definition>
        <argsstring>(state_t) const</argsstring>
        <name>isInitial</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>the state is an initial state </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000017"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="178" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classWTA_1ae6b10f70925f14f36b839e5d8657bc5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>state_t</type>
        <definition>virtual state_t WTA::initial</definition>
        <argsstring>(pre_t pre=0, pre_t post=0) const</argsstring>
        <name>initial</name>
        <reimplementedby refid="group__schemata_1gaf47213e6243f48f06681089e03fa08ef">initial</reimplementedby>
        <reimplementedby refid="group__schemata_1ga2a6c3a5867fefdac97470fd083aaa2dd">initial</reimplementedby>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>initial(pre, post) pre and post are use for quantification and ignored in this version (useless for schemas) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="183" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga625d9da502c5cd554797ebe9ee9023c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t WTA::resolution</definition>
        <argsstring>() const</argsstring>
        <name>resolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="185" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="289" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga924a1c533383a7185b9d466b59c5a495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTransitionList" kindref="compound">TransitionList</ref> &amp;</type>
        <definition>TransitionList &amp; WTA::add</definition>
        <argsstring>(state_t, bool initial=false)</argsstring>
        <name>add</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>initial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>add(s, i) register state s if s was already registered, return a reference to its transition list. otherwise, create state s with an empty transition list and returns a reference to it. moreover s is set as initial if i = true. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000018"><xreftitle>Todo</xreftitle><xrefdescription><para>suppr. flag initial </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="192" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="144" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga01de1e03d09518b38ab69a2075276ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTransitionList" kindref="compound">TransitionList</ref> &amp;</type>
        <definition>TransitionList &amp; WTA::add</definition>
        <argsstring>(state_t, const Transition &amp;, bool initial=false)</argsstring>
        <name>add</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>t</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>initial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>add(s, t) add a transition with head s and with body/weight described in t if s was not registered, it is registered the transition t is added to the transition list of s and a reference to this transition list is returned moreover s is set as initial if i = true. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000019"><xreftitle>Todo</xreftitle><xrefdescription><para>suppr. flag initial </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="200" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga3d8d24249e26ecc8bbdaf672c6e8d3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::remove</definition>
        <argsstring>(state_t)</argsstring>
        <name>remove</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>remove the entry for given state s in the table of the table i.e. all transitions targeted to s, and all the transitions with s in their body. if s was in the initial set, it is also removed from this set. s must be registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="207" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="174" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga23c3f9884c683e4bbab323208e08c672" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TransitionList_const_iterator</type>
        <definition>TransitionList_const_iterator WTA::begin</definition>
        <argsstring>(state_t) const</argsstring>
        <name>begin</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>begin(s) returns an iterator pointing to the first transition with head state s. s must be registered. not for modifying transition list of s. use add(...) methods for this. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="212" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="217" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaf5075f5a210343d6da208f4c80421cb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TransitionList_const_iterator</type>
        <definition>TransitionList_const_iterator WTA::end</definition>
        <argsstring>(state_t) const</argsstring>
        <name>end</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>begin(s) returns an iterator pointing to the past-the-end transition with head state s. s must be registered. not for modifying transition list of s. use add(...) methods for this. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="217" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="226" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga28c9a7e35d4d516ef0f9967e773305f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t WTA::oftarget</definition>
        <argsstring>(state_t) const</argsstring>
        <name>oftarget</name>
        <param>
          <type>state_t</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>oftarget(s) return the number of transitions of head state s. s must be registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="221" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="254" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga9ef4193ae949ae7c9e52d30720e37202" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WTA::isClean</definition>
        <argsstring>() const</argsstring>
        <name>isClean</name>
        <briefdescription>
<para>the <ref refid="classWTA" kindref="compound">WTA</ref> has no empty states </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="224" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="423" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaea41b32c37bbe955d0359039d7731fea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; state_t &gt;</type>
        <definition>set&lt; state_t &gt; WTA::emptyStates</definition>
        <argsstring>() const</argsstring>
        <name>emptyStates</name>
        <briefdescription>
<para>returns the set of all non-inhabited (zero weight) states in wta </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="227" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="387" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaec169477bdc2cf883916c38dbc18e577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::clean</definition>
        <argsstring>()</argsstring>
        <name>clean</name>
        <briefdescription>
<para>remove states not inhabited and transitions containing these states </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="230" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="431" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classWTA_1aa4eda8d626af33674c59fef22c8220c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::normalize</definition>
        <argsstring>(unsigned int flag=0)</argsstring>
        <name>normalize</name>
        <param>
          <type>unsigned int</type>
          <declname>flag</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>for all state q, for all transition tr to q (in the transition list TL(q) of q). recompute weights to get a probabilistic <ref refid="classWTA" kindref="compound">WTA</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>with arg = 0, we assume the current <ref refid="classWTA" kindref="compound">WTA</ref> is a penalty model. the probability is then obtained by dividing (<ref refid="group__weight_1ga5d63ead0a1d21ee5628c643fca773903" kindref="member">Weight.scalar</ref>) the inverse of the norm (<ref refid="group__weight_1ga68bd9621500f31ba5f0fbe04dc5a00e4" kindref="member">Weight.norm</ref>) of the weight of the tr by the sum of inverses of norms of transitions in TL(q).</para>
<para>with arg = 1, we assume the current <ref refid="classWTA" kindref="compound">WTA</ref> is a counting model. the probability is then obtained by dividing (<ref refid="group__weight_1ga5d63ead0a1d21ee5628c643fca773903" kindref="member">Weight.scalar</ref>) the norm (<ref refid="group__weight_1ga68bd9621500f31ba5f0fbe04dc5a00e4" kindref="member">Weight.norm</ref>) of the weight of the tr by the sum of norms of transitions in TL(q). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga8dfef6b591f952f0fea9dae1f5e475c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::CountingtoStochastic</definition>
        <argsstring>()</argsstring>
        <name>CountingtoStochastic</name>
        <briefdescription>
<para>cast weights in all transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWTA" kindref="compound">WTA</ref> must have <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;FloatWeight&quot;. this <ref refid="classWTA" kindref="compound">WTA</ref> is casted into <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;ViterbiWeight&quot; divide by sum for target state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="255" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="506" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaff1196a45ffd1400bc4004e27b167218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::PenaltytoCounting</definition>
        <argsstring>()</argsstring>
        <name>PenaltytoCounting</name>
        <briefdescription>
<para>cast weights in all transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWTA" kindref="compound">WTA</ref> must have <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;TropicalWeight&quot;. this <ref refid="classWTA" kindref="compound">WTA</ref> is casted into <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;FloatWeight&quot; inverse </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="262" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="564" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga0bddc6750b18023be6976bd5cd46a2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::StochastictoPenalty</definition>
        <argsstring>()</argsstring>
        <name>StochastictoPenalty</name>
        <briefdescription>
<para>cast weights in all transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWTA" kindref="compound">WTA</ref> must have <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;ViterbiWeight&quot;. this <ref refid="classWTA" kindref="compound">WTA</ref> is casted into <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;TropicalWeight&quot; -ln </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="269" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="599" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga5f3a0d868bf26b504cccc53b4d55e09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::CountingtoPenalty</definition>
        <argsstring>()</argsstring>
        <name>CountingtoPenalty</name>
        <briefdescription>
<para>cast weights in all transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this <ref refid="classWTA" kindref="compound">WTA</ref> must have <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;FloatWeight&quot;. this <ref refid="classWTA" kindref="compound">WTA</ref> is casted into <ref refid="classWeight" kindref="compound">Weight</ref> Type &quot;TropicalWeight&quot; composition of CountingtoStochastic and StochastictoPenalty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="276" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="557" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga91e272f4f9463149cd296f48e65a4185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::abstract</definition>
        <argsstring>(bool flag=false)</argsstring>
        <name>abstract</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>abstract the leaf label values in domain [0..MAX_GRACE] every value &gt; MAX_GRACE is casted to MAX_GRACE the weights are summed accordingly </para>
        </briefdescription>
        <detaileddescription>
<para>leaf labels in domain of <ref refid="classLabel" kindref="compound">Label</ref> (not <ref refid="classSerialLabel" kindref="compound">SerialLabel</ref>). <xrefsect id="todo_1_todo000020"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR unused </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="285" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="445" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga0f6551b20a213eb88c6a7e822ebc5915" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t WTA::countStates</definition>
        <argsstring>() const</argsstring>
        <name>countStates</name>
        <briefdescription>
<para>number of states </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="288" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga8acbd7562a6f69e7634d6b9f9e341e4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t WTA::countTransitions</definition>
        <argsstring>() const</argsstring>
        <name>countTransitions</name>
        <briefdescription>
<para>number of transition </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="291" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga9370cdd31619d49bfb0b18fa6b4e13b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t WTA::countAll</definition>
        <argsstring>() const</argsstring>
        <name>countAll</name>
        <briefdescription>
<para>number of symbols (state occurences) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="294" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaf3c11e99698a2cf7ef039632dc5e2b6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WTA::hasWeightType</definition>
        <argsstring>(std::string code) const</argsstring>
        <name>hasWeightType</name>
        <param>
          <type>std::string</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>return wether the weights in transition have the type of the code (code of the letter weight if there is one or &quot;UNKNOWN&quot; otherwise). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="298" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="640" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga762b5bbee46468815993417ca9b3d9c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight WTA::weight_zero</definition>
        <argsstring>() const</argsstring>
        <name>weight_zero</name>
        <briefdescription>
<para>return the 0 value in the weight domain in this <ref refid="classWTA" kindref="compound">WTA</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="301" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="646" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gabfe48e6398d83c03161b664dadcf8fcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight WTA::weight_one</definition>
        <argsstring>() const</argsstring>
        <name>weight_one</name>
        <briefdescription>
<para>return the 1 value in the weight domain in this <ref refid="classWTA" kindref="compound">WTA</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="304" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="653" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaa6598176fb91c70988bea7cf824ec157" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight WTA::eval</definition>
        <argsstring>(const RhythmTree &amp;t) const</argsstring>
        <name>eval</name>
        <reimplementedby refid="group__schemata_1ga2665883ffe41001dd7c2568bc9bef02f">eval</reimplementedby>
        <param>
          <type>const <ref refid="classRhythmTree" kindref="compound">RhythmTree</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>evaluate the weight of the tree t for <ref refid="classWTA" kindref="compound">WTA</ref> in initial state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="307" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="660" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gac842f196f85e3c3b079c7c0992173e46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight WTA::eval</definition>
        <argsstring>(const RhythmTree &amp;t, state_t s) const</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classRhythmTree" kindref="compound">RhythmTree</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="310" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="667" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classWTA_1a646bb2048b24358325f8e07c789af82c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
        <definition>pre_t WTA::max_pre</definition>
        <argsstring>() const</argsstring>
        <name>max_pre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="312" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classWTA_1a1a5cead20cba42a111ff7ab5546bc54c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
        <definition>pre_t WTA::max_post</definition>
        <argsstring>() const</argsstring>
        <name>max_post</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="314" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaeb713b8807bc81c6c6519ced5d531e06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WTA::print</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>o</defname>
        </param>
        <briefdescription>
<para>print sizes to output stream </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="324" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="722" bodyend="729"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="group__schemata_1gae6fb2dbd82ed290528b90ee7bb4b6ccc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; state_t &gt;</type>
        <definition>std::set&lt; state_t &gt; WTA::step</definition>
        <argsstring>(const std::set&lt; state_t &gt; &amp;)</argsstring>
        <name>step</name>
        <param>
          <type>const std::set&lt; state_t &gt; &amp;</type>
          <defname>sin</defname>
        </param>
        <briefdescription>
<para>step(s) returns the set of states reachable in one transition step by this <ref refid="classWTA" kindref="compound">WTA</ref> from the given state set s. all the states in the set s must be registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="351" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="333" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gab8ea841b4a1e71ef70d3fda927f0507d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; state_t &gt;</type>
        <definition>set&lt; state_t &gt; WTA::allStates</definition>
        <argsstring>() const</argsstring>
        <name>allStates</name>
        <briefdescription>
<para>returns the set of all states occuring in wta (in head or body) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/WTA.hpp" line="354" column="1" bodyfile="src/schemata/WTA.cpp" bodystart="360" bodyend="383"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class of schemas = weighted tree automata = weighted CFG. </para>
    </briefdescription>
    <detaileddescription>
<para>state (and non-terminals): int</para>
<para>transition table = map state -&gt; (transition = state list), weight state: head state state list: see Transition.hpp body states if length &gt; 1 label if length = 1</para>
<para>in other terms transition rules have one of the forms <blockquote><para>s -&gt; (s1,...,sk) w where k &gt; 1, s, s1, ..., sk are states and w weight s -&gt; (s1) w where s1 is an leaf label = int encoding </para>
</blockquote></para>
<para>leaf label (terminals): number of note + grace notes at (left of) current node <blockquote><para>0 = continuation 1 = 1 note | rest (au + 1 note) 2 = 1 grace notes + 1 note 3 = 2 grace notes + 1 note &gt;etc </para>
</blockquote><simplesect kind="see"><para><ref refid="classLabel" kindref="compound">Label</ref> for the functions managing these labels transition <ref refid="group__table" kindref="compound">Table module</ref>: <blockquote><para>head state -&gt; vector of (state vector, <ref refid="group__weight" kindref="compound">Weight module</ref>) </para>
</blockquote></para>
</simplesect>
weights are concrete weight values embedded in a <ref refid="classWeight" kindref="compound">Weight</ref> envelop we consider 3 kinds of weights for <ref refid="classWTA" kindref="compound">WTA</ref> serialized in file:<itemizedlist>
<listitem><para>counting model: weight = # of subresettrees in corpus parsed by rule implemented as <ref refid="classFloatWeight" kindref="compound">FloatWeight</ref></para>
</listitem><listitem><para>penalty model: weight = penalities to sum implemented as <ref refid="classTropicalWeight" kindref="compound">TropicalWeight</ref> e.g. inverse of counting model (normalized?)</para>
</listitem><listitem><para>probabilistic model, fulfilling stochastic condition (sum of weight of transition from a state = 1) implemented as <ref refid="classViterbiWeight" kindref="compound">ViterbiWeight</ref> e.g. (# of subtrees in corpus parsed by rule) / (# of subtrees matching lhs state) </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="496">
        <label>WTAFile</label>
        <link refid="classWTAFile"/>
        <childnode refid="491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="491">
        <label>WTA</label>
        <link refid="classWTA"/>
      </node>
      <node id="493">
        <label>CountingWTA</label>
        <link refid="classCountingWTA"/>
        <childnode refid="491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="495">
        <label>ValueWTA</label>
        <link refid="classValueWTA"/>
        <childnode refid="491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="494">
        <label>PreWTA</label>
        <link refid="classPreWTA"/>
        <childnode refid="491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="492">
        <label>ComboWTA</label>
        <link refid="classComboWTA"/>
        <childnode refid="491" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="499">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="497">
        <label>WTA</label>
        <link refid="classWTA"/>
        <childnode refid="498" relation="usage">
          <edgelabel>_seed</edgelabel>
        </childnode>
      </node>
      <node id="498">
        <label>Weight</label>
        <link refid="classWeight"/>
        <childnode refid="499" relation="usage">
          <edgelabel>_letter</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/schemata/WTA.hpp" line="153" column="1" bodyfile="src/schemata/WTA.hpp" bodystart="152" bodyend="359"/>
    <listofallmembers>
      <member refid="classWTA_1a3ed6ca11b3e520485171a0f07deffd21" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_cpt_size</name></member>
      <member refid="classWTA_1a76cf3c27412f9d61464a8a82aea97b89" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_cpt_tr</name></member>
      <member refid="classWTA_1a52dd7c5ad9439670d75df10f2dd1e4df" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_initial</name></member>
      <member refid="classWTA_1acb19a9da4f88e4b3538b6889cbd49a08" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_max_post</name></member>
      <member refid="classWTA_1ae6d1c616caceb7819d4d23f4a635cddc" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_max_pre</name></member>
      <member refid="classWTA_1ad67d54c742de0f18d8e54e458e7a8089" prot="private" virt="non-virtual"><scope>WTA</scope><name>_next_id</name></member>
      <member refid="classWTA_1ad93a124d289cf4d1e2801fccb01ca8ea" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_seed</name></member>
      <member refid="classWTA_1a0d3422d597fbe64d655d9ced77dd7b8f" prot="protected" virt="non-virtual"><scope>WTA</scope><name>_table</name></member>
      <member refid="group__schemata_1ga91e272f4f9463149cd296f48e65a4185" prot="public" virt="non-virtual"><scope>WTA</scope><name>abstract</name></member>
      <member refid="group__schemata_1ga924a1c533383a7185b9d466b59c5a495" prot="public" virt="non-virtual"><scope>WTA</scope><name>add</name></member>
      <member refid="group__schemata_1ga01de1e03d09518b38ab69a2075276ae2" prot="public" virt="non-virtual"><scope>WTA</scope><name>add</name></member>
      <member refid="group__schemata_1gab8ea841b4a1e71ef70d3fda927f0507d" prot="protected" virt="non-virtual"><scope>WTA</scope><name>allStates</name></member>
      <member refid="group__schemata_1ga23c3f9884c683e4bbab323208e08c672" prot="public" virt="non-virtual"><scope>WTA</scope><name>begin</name></member>
      <member refid="group__schemata_1gaec169477bdc2cf883916c38dbc18e577" prot="public" virt="non-virtual"><scope>WTA</scope><name>clean</name></member>
      <member refid="group__schemata_1ga9370cdd31619d49bfb0b18fa6b4e13b7" prot="public" virt="non-virtual"><scope>WTA</scope><name>countAll</name></member>
      <member refid="group__schemata_1ga5f3a0d868bf26b504cccc53b4d55e09a" prot="public" virt="non-virtual"><scope>WTA</scope><name>CountingtoPenalty</name></member>
      <member refid="group__schemata_1ga8dfef6b591f952f0fea9dae1f5e475c7" prot="public" virt="non-virtual"><scope>WTA</scope><name>CountingtoStochastic</name></member>
      <member refid="group__schemata_1ga0f6551b20a213eb88c6a7e822ebc5915" prot="public" virt="non-virtual"><scope>WTA</scope><name>countStates</name></member>
      <member refid="group__schemata_1ga8acbd7562a6f69e7634d6b9f9e341e4a" prot="public" virt="non-virtual"><scope>WTA</scope><name>countTransitions</name></member>
      <member refid="group__schemata_1gada977ff7270308f29852b59f38965bde" prot="public" virt="non-virtual"><scope>WTA</scope><name>empty</name></member>
      <member refid="group__schemata_1gaea41b32c37bbe955d0359039d7731fea" prot="public" virt="non-virtual"><scope>WTA</scope><name>emptyStates</name></member>
      <member refid="group__schemata_1gaf5075f5a210343d6da208f4c80421cb5" prot="public" virt="non-virtual"><scope>WTA</scope><name>end</name></member>
      <member refid="group__schemata_1gaa6598176fb91c70988bea7cf824ec157" prot="public" virt="virtual"><scope>WTA</scope><name>eval</name></member>
      <member refid="group__schemata_1gac842f196f85e3c3b079c7c0992173e46" prot="public" virt="virtual"><scope>WTA</scope><name>eval</name></member>
      <member refid="classWTA_1a23060c851d5cf624215c2d9dc8ad4b45" prot="public" virt="virtual"><scope>WTA</scope><name>hasType</name></member>
      <member refid="group__schemata_1gaf3c11e99698a2cf7ef039632dc5e2b6b" prot="public" virt="non-virtual"><scope>WTA</scope><name>hasWeightType</name></member>
      <member refid="classWTA_1ae6b10f70925f14f36b839e5d8657bc5e" prot="public" virt="virtual"><scope>WTA</scope><name>initial</name></member>
      <member refid="classWTA_1a5d8ace9f515a3902d889db560f08f4c5" prot="public" virt="non-virtual"><scope>WTA</scope><name>initials</name></member>
      <member refid="group__schemata_1ga9ef4193ae949ae7c9e52d30720e37202" prot="public" virt="non-virtual"><scope>WTA</scope><name>isClean</name></member>
      <member refid="group__schemata_1ga88d07a1e47cc3ee537234861b7336dd6" prot="public" virt="non-virtual"><scope>WTA</scope><name>isInitial</name></member>
      <member refid="group__schemata_1ga4459bd6654cbe35b39df9cade16c6d58" prot="public" virt="non-virtual"><scope>WTA</scope><name>isRegistered</name></member>
      <member refid="classWTA_1a1a5cead20cba42a111ff7ab5546bc54c" prot="public" virt="non-virtual"><scope>WTA</scope><name>max_post</name></member>
      <member refid="classWTA_1a646bb2048b24358325f8e07c789af82c" prot="public" virt="non-virtual"><scope>WTA</scope><name>max_pre</name></member>
      <member refid="classWTA_1aa4eda8d626af33674c59fef22c8220c1" prot="public" virt="non-virtual"><scope>WTA</scope><name>normalize</name></member>
      <member refid="group__schemata_1ga28c9a7e35d4d516ef0f9967e773305f8" prot="public" virt="non-virtual"><scope>WTA</scope><name>oftarget</name></member>
      <member refid="classWTA_1a02492d7d852ab9e6e2b47096fb5ccc54" prot="public" virt="non-virtual"><scope>WTA</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__schemata_1gaff1196a45ffd1400bc4004e27b167218" prot="public" virt="non-virtual"><scope>WTA</scope><name>PenaltytoCounting</name></member>
      <member refid="group__schemata_1gaeb713b8807bc81c6c6519ced5d531e06" prot="public" virt="non-virtual"><scope>WTA</scope><name>print</name></member>
      <member refid="group__schemata_1ga3d8d24249e26ecc8bbdaf672c6e8d3cf" prot="public" virt="non-virtual"><scope>WTA</scope><name>remove</name></member>
      <member refid="group__schemata_1ga625d9da502c5cd554797ebe9ee9023c4" prot="public" virt="non-virtual"><scope>WTA</scope><name>resolution</name></member>
      <member refid="group__schemata_1gab201fee50d73843159cbef5f453838f0" prot="public" virt="non-virtual"><scope>WTA</scope><name>size</name></member>
      <member refid="group__schemata_1gae6fb2dbd82ed290528b90ee7bb4b6ccc" prot="protected" virt="non-virtual"><scope>WTA</scope><name>step</name></member>
      <member refid="group__schemata_1ga0bddc6750b18023be6976bd5cd46a2f5" prot="public" virt="non-virtual"><scope>WTA</scope><name>StochastictoPenalty</name></member>
      <member refid="classWTA_1a529e9db519ca17427d0c6076be54f2a4" prot="private" virt="non-virtual"><scope>WTA</scope><name>TransitionList</name></member>
      <member refid="group__schemata_1gabfe48e6398d83c03161b664dadcf8fcd" prot="public" virt="virtual"><scope>WTA</scope><name>weight_one</name></member>
      <member refid="group__schemata_1ga762b5bbee46468815993417ca9b3d9c6" prot="public" virt="virtual"><scope>WTA</scope><name>weight_zero</name></member>
      <member refid="group__schemata_1ga5636da911ebbe8772c5444172d56800d" prot="public" virt="non-virtual"><scope>WTA</scope><name>WTA</name></member>
      <member refid="group__schemata_1ga6eeb789b8c8aa8404f611a6fed61faca" prot="public" virt="non-virtual"><scope>WTA</scope><name>WTA</name></member>
      <member refid="group__schemata_1gaacdee6c2292baea7f712c84a5e205432" prot="public" virt="non-virtual"><scope>WTA</scope><name>~WTA</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
