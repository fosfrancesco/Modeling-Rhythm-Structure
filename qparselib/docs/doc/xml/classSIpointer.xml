<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classSIpointer" kind="class" language="C++" prot="public">
    <compoundname>SIpointer</compoundname>
    <basecompoundref refid="classSpointer" prot="public" virt="non-virtual">Spointer</basecompoundref>
    <derivedcompoundref refid="classSIPpointer" prot="public" virt="non-virtual">SIPpointer</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classSIpointer_1ad623e07df03b58eced4ceaf0855f5993" prot="protected" static="no" mutable="no">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree* SIpointer::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="154" column="1" bodyfile="src/table/PtrSI.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__table_1ga7e962d8567566398e5f620ef964267cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>()</argsstring>
        <name>SIpointer</name>
        <briefdescription>
<para>dummy ptr </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="42" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga464163b749ecd94516ab6e94f7baa5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(label_t)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>fake ptr for terminal run, contains only a label symbol it is considered as complete see description in Ptr.hpp </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="47" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac560506e7bf1439877178cf6d2459e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(Environment *env, state_t s, Rational mdur=Rational(1), double rext=0)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rext</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>class specific top ptr (covering the whole input segment + given extension in realtime, of given musical duration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>must contain an input segment and interval heap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="53" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="30" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3abe73f8e3188ca49f11e09d794f1f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(Environment *, const SIpointer &amp;p, double rdur, Rational mdur, bool position, size_t i, state_t s)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rdur</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>position</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>split ptr p in 2 parts. </para>
        </briefdescription>
        <detaileddescription>
<para>if position = 0, first part has (real-time/musical-time) durations rdur/mdur</para>
<para>if position = 1, second part has (real-time/musical-time) durations rdur/mdur construct part number i (1 or 2) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>must contain an input segment and interval heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <ref refid="classWTA" kindref="compound">WTA</ref> state or Meta state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="71" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="46" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gab5c8a8654ef626d4c7b75ef67ed28aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(Environment *, const SIpointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="80" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="76" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3df3168789d247e497f127caa7840e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(const SIpointer &amp;)</argsstring>
        <name>SIpointer</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="86" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga175406f6e30433d90a004aa27c401f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(const SIpointer &amp;p, const SIpointer &amp;p0, const SIpointer &amp;p1)</argsstring>
        <name>SIpointer</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="90" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga19a6965aca9363f90f45c5d0e07bc99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(const SIpointer &amp;p0, const SIpointer &amp;p1)</argsstring>
        <name>SIpointer</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="96" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga071bb69977a62e26f9ec11230ae2646b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
        <definition>SIpointer &amp; SIpointer::operator=</definition>
        <argsstring>(const SIpointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="99" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3330f8e59b08797b4c73ae558f6d588e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::operator==</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a unordered_multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="103" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga303c4da57a70fa07b7a2de3692fc9091" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::operator!=</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="104" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga51c64ecf271622a259840f55236778ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::operator&lt;</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="108" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="183" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga259b23462f7e87f6df0e9361c1884618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::instance</definition>
        <argsstring>(const SIpointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="111" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaa50fe6e651b28c77839ddfaf1bbdcd4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::subsume</definition>
        <argsstring>(const SIpointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="114" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classSIpointer_1a4cb39a0c156f3b09eb15feb12dad2434" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SIpointer::has_I</definition>
        <argsstring>() const</argsstring>
        <name>has_I</name>
        <reimplements refid="classPointer_1a7018d6fde0393288fbd7ed5c1ffe9e5b">has_I</reimplements>
        <reimplementedby refid="classSIPpointer_1a1166ddc463561929c52bc12f6cd47bca">has_I</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="116" column="1" bodyfile="src/table/PtrSI.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classSIpointer_1a433d1c2fbb2e79b7f0ada6b424739bec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SIpointer::has_P</definition>
        <argsstring>() const</argsstring>
        <name>has_P</name>
        <reimplements refid="classPointer_1a96063327a69b47d288f345b0d2f4b42b">has_P</reimplements>
        <reimplementedby refid="classSIPpointer_1a251168384b826897585f182320d4d8ac">has_P</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="117" column="1" bodyfile="src/table/PtrSI.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classSIpointer_1a1471edc06d0a40b154cb1b643b9f28f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree* SIpointer::interval</definition>
        <argsstring>() const</argsstring>
        <name>interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="119" column="1" bodyfile="src/table/PtrSI.hpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga638627bc96caa0f1dbf7093f0f70951b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::complete</definition>
        <argsstring>() const</argsstring>
        <name>complete</name>
        <reimplements refid="group__table_1gace5bd2026fef480084f3cc5dc28086f3">complete</reimplements>
        <reimplementedby refid="group__table_1ga2f95b5a2058b20744a00737b1240bc83">complete</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="122" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga6bdbea8e7013194f834be17932efe642" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        <definition>label_t SIpointer::label</definition>
        <argsstring>(const Transition &amp;t) const</argsstring>
        <name>label</name>
        <reimplements refid="group__table_1ga15067ad809b5ac25b45c0187550e0b17">label</reimplements>
        <reimplementedby refid="group__table_1ga7f7cd8ae86d71b147fc662d3cc4977c0">label</reimplementedby>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp the _pre value must be known _node must be set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="127" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac83e0619c17ce4efd589f73513706a6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::divisible</definition>
        <argsstring>() const</argsstring>
        <name>divisible</name>
        <reimplements refid="group__table_1ga54817fbae1688dab4dfff5724e762640">divisible</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp</para>
</simplesect>
if this pointer has a <ref refid="classWTA" kindref="compound">WTA</ref> state: it is not worth descending when this pointer corresponds to an input sub-segment not inhabited.</para>
<para>if this pointer has a Meta state: it is not worth descending when this ptr corresponds to an empty segment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="138" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaca7d3c4d141ecf2874a5e5512e0c02ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::compatible</definition>
        <argsstring>(const label_t, bool abstract=true) const</argsstring>
        <name>compatible</name>
        <reimplements refid="classPointer_1a7b636072b492b57efe3ead47e03a67bd">compatible</reimplements>
        <reimplementedby refid="group__table_1gabf87df773f8e0f628e0bae79e88097db">compatible</reimplementedby>
        <param>
          <type>const <ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>label</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>abstract</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="141" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="268" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga555753e41af94ac201a0c8c99babb83b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::dummy</definition>
        <argsstring>() const</argsstring>
        <name>dummy</name>
        <reimplements refid="group__table_1ga0a994ec6827ef23556b500382fc5a1fc">dummy</reimplements>
        <reimplementedby refid="group__table_1gaf830b0bf9d24b53e4674de49308b7853">dummy</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="144" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga6b46b59b3b465ba6a995f76ff34970ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight SIpointer::terminalWeight</definition>
        <argsstring>(const InputSegment *, const Transition &amp;) const</argsstring>
        <name>terminalWeight</name>
        <reimplements refid="group__table_1ga4ca596fe52abd36d550a10818678d54c">terminalWeight</reimplements>
        <reimplementedby refid="group__table_1ga01caac75d66ff2e272a248c7e1954415">terminalWeight</reimplementedby>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>tr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>input segment must not be NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="148" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="308" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classSIpointer_1a86a37eaf8509fee42b0cecf04740db9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const SIpointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="151" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="353" bodyend="376"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="group__table_1gacc34f81b5d73c93840bce279ddde4620" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIpointer::equal_node</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>equal_node</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="156" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="150" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="384">
        <label>SIpointer</label>
        <link refid="classSIpointer"/>
        <childnode refid="385" relation="public-inheritance">
        </childnode>
      </node>
      <node id="386">
        <label>Pointer</label>
        <link refid="classPointer"/>
      </node>
      <node id="388">
        <label>SKIPpointer</label>
        <link refid="classSKIPpointer"/>
        <childnode refid="387" relation="public-inheritance">
        </childnode>
      </node>
      <node id="385">
        <label>Spointer</label>
        <link refid="classSpointer"/>
        <childnode refid="386" relation="public-inheritance">
        </childnode>
      </node>
      <node id="387">
        <label>SIPpointer</label>
        <link refid="classSIPpointer"/>
        <childnode refid="384" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="389">
        <label>SIpointer</label>
        <link refid="classSIpointer"/>
        <childnode refid="390" relation="public-inheritance">
        </childnode>
        <childnode refid="392" relation="usage">
          <edgelabel>_node</edgelabel>
        </childnode>
      </node>
      <node id="391">
        <label>Pointer</label>
        <link refid="classPointer"/>
      </node>
      <node id="394">
        <label>Interval</label>
        <link refid="classInterval"/>
        <childnode refid="395" relation="usage">
          <edgelabel>mbegin</edgelabel>
          <edgelabel>mend</edgelabel>
        </childnode>
      </node>
      <node id="390">
        <label>Spointer</label>
        <link refid="classSpointer"/>
        <childnode refid="391" relation="public-inheritance">
        </childnode>
      </node>
      <node id="393">
        <label>AlignedInterval</label>
        <link refid="classAlignedInterval"/>
        <childnode refid="394" relation="public-inheritance">
        </childnode>
      </node>
      <node id="392">
        <label>IntervalTree</label>
        <link refid="classIntervalTree"/>
        <childnode refid="393" relation="public-inheritance">
        </childnode>
        <childnode refid="392" relation="usage">
          <edgelabel>_previous_sibling</edgelabel>
          <edgelabel>_parent</edgelabel>
        </childnode>
      </node>
      <node id="395">
        <label>Rational</label>
        <link refid="classRational"/>
      </node>
    </collaborationgraph>
    <location file="src/table/PtrSI.hpp" line="37" column="1" bodyfile="src/table/PtrSI.hpp" bodystart="36" bodyend="157"/>
    <listofallmembers>
      <member refid="classSIpointer_1ad623e07df03b58eced4ceaf0855f5993" prot="protected" virt="non-virtual"><scope>SIpointer</scope><name>_node</name></member>
      <member refid="classSpointer_1a27f37ac70c70f90d9a4a576606bb52e1" prot="protected" virt="non-virtual"><scope>SIpointer</scope><name>_state</name></member>
      <member refid="group__table_1gaca7d3c4d141ecf2874a5e5512e0c02ff" prot="public" virt="virtual"><scope>SIpointer</scope><name>compatible</name></member>
      <member refid="group__table_1ga638627bc96caa0f1dbf7093f0f70951b" prot="public" virt="virtual"><scope>SIpointer</scope><name>complete</name></member>
      <member refid="group__table_1gac83e0619c17ce4efd589f73513706a6b" prot="public" virt="virtual"><scope>SIpointer</scope><name>divisible</name></member>
      <member refid="group__table_1ga555753e41af94ac201a0c8c99babb83b" prot="public" virt="virtual"><scope>SIpointer</scope><name>dummy</name></member>
      <member refid="group__table_1gacc34f81b5d73c93840bce279ddde4620" prot="protected" virt="non-virtual"><scope>SIpointer</scope><name>equal_node</name></member>
      <member refid="classSIpointer_1a4cb39a0c156f3b09eb15feb12dad2434" prot="public" virt="virtual"><scope>SIpointer</scope><name>has_I</name></member>
      <member refid="classPointer_1a66999c2d23c4b592228f1e74a96e0315" prot="public" virt="virtual"><scope>SIpointer</scope><name>has_K</name></member>
      <member refid="classSIpointer_1a433d1c2fbb2e79b7f0ada6b424739bec" prot="public" virt="virtual"><scope>SIpointer</scope><name>has_P</name></member>
      <member refid="classSpointer_1aec852b63ae9427911ff290979bc0a4b4" prot="public" virt="virtual"><scope>SIpointer</scope><name>has_S</name></member>
      <member refid="classPointer_1a02c73f5f2b21a1fe37b744383508cb64" prot="public" virt="virtual"><scope>SIpointer</scope><name>incr</name></member>
      <member refid="group__table_1gad709430d698804267807f12deba9952b" prot="public" virt="virtual"><scope>SIpointer</scope><name>innerWeight</name></member>
      <member refid="group__table_1ga259b23462f7e87f6df0e9361c1884618" prot="public" virt="virtual"><scope>SIpointer</scope><name>instance</name></member>
      <member refid="group__table_1ga718cc6f7473c3fb1b074211bf2f16d8b" prot="public" virt="virtual" ambiguityscope="Spointer::"><scope>SIpointer</scope><name>instance</name></member>
      <member refid="classSIpointer_1a1471edc06d0a40b154cb1b643b9f28f7" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>interval</name></member>
      <member refid="group__table_1ga6bdbea8e7013194f834be17932efe642" prot="public" virt="virtual"><scope>SIpointer</scope><name>label</name></member>
      <member refid="group__table_1ga303c4da57a70fa07b7a2de3692fc9091" prot="public" virt="virtual"><scope>SIpointer</scope><name>operator!=</name></member>
      <member refid="group__table_1ga51c64ecf271622a259840f55236778ef" prot="public" virt="virtual"><scope>SIpointer</scope><name>operator&lt;</name></member>
      <member refid="group__table_1ga797b376c9ed1b4777ea94ff8350c65c8" prot="public" virt="virtual" ambiguityscope="Spointer::"><scope>SIpointer</scope><name>operator&lt;</name></member>
      <member refid="classSIpointer_1a86a37eaf8509fee42b0cecf04740db9b" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__table_1ga071bb69977a62e26f9ec11230ae2646b" prot="public" virt="virtual"><scope>SIpointer</scope><name>operator=</name></member>
      <member refid="group__table_1ga88eb3c521aa1c9bc9b8891f20b9a01eb" prot="public" virt="virtual" ambiguityscope="Spointer::"><scope>SIpointer</scope><name>operator=</name></member>
      <member refid="group__table_1ga3330f8e59b08797b4c73ae558f6d588e" prot="public" virt="virtual"><scope>SIpointer</scope><name>operator==</name></member>
      <member refid="group__table_1gacb9d4d8e3da8a1e082b80fd31abb9772" prot="public" virt="virtual" ambiguityscope="Spointer::"><scope>SIpointer</scope><name>operator==</name></member>
      <member refid="classPointer_1aa682c210e4ae3ef7268db1ee5bcf9f9d" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>partial</name></member>
      <member refid="classPointer_1a8ded051c871b7fccfb6b2a20b8920cab" prot="public" virt="virtual"><scope>SIpointer</scope><name>rank</name></member>
      <member refid="group__table_1ga7e962d8567566398e5f620ef964267cd" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1ga464163b749ecd94516ab6e94f7baa5bf" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1gac560506e7bf1439877178cf6d2459e7f" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1ga3abe73f8e3188ca49f11e09d794f1f05" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1gab5c8a8654ef626d4c7b75ef67ed28aa9" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1ga3df3168789d247e497f127caa7840e88" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1ga175406f6e30433d90a004aa27c401f29" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1ga19a6965aca9363f90f45c5d0e07bc99e" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>SIpointer</name></member>
      <member refid="group__table_1ga467ee6f93cd0429edb40fc4de100c3c4" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gaad8a647a58df31aefd8f2703b9f86dc5" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="group__table_1ga49f82b7aafd3ae237243c85272597fa7" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="group__table_1ga72441f0d67497c90602a123c45dc53d1" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gaf40e1a1f0edc608d4413f096a19aae78" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gac303715911a48c482acb6ae4188508d3" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gad078973f8318ccf5800db79e87584dcc" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>Spointer</name></member>
      <member refid="classSpointer_1a8fa50c04246ceb3a48e961946a2427f7" prot="public" virt="non-virtual"><scope>SIpointer</scope><name>state</name></member>
      <member refid="group__table_1gaa50fe6e651b28c77839ddfaf1bbdcd4f" prot="public" virt="virtual"><scope>SIpointer</scope><name>subsume</name></member>
      <member refid="group__table_1ga06fa67855bfb50d81e18bdfacce965ce" prot="public" virt="virtual" ambiguityscope="Spointer::"><scope>SIpointer</scope><name>subsume</name></member>
      <member refid="group__table_1ga6b46b59b3b465ba6a995f76ff34970ce" prot="public" virt="virtual"><scope>SIpointer</scope><name>terminalWeight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
