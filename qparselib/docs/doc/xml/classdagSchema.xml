<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classdagSchema" kind="class" language="C++" prot="public">
    <compoundname>dagSchema</compoundname>
    <includes local="no">SubdivisionSchema.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdagSchema_1ab07c5c783ae1635f1adf99dd51254c40" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structds__transition" kindref="compound">ds_transition</ref> &gt;</type>
        <definition>std::vector&lt;ds_transition&gt; dagSchema::_table</definition>
        <argsstring></argsstring>
        <name>_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="156" column="1" bodyfile="src/schemata/SubdivisionSchema.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdagSchema_1a0a042c6b5178777b1d20c34c193dd03f" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int dagSchema::_max_state</definition>
        <argsstring></argsstring>
        <name>_max_state</name>
        <briefdescription>
<para>max_state occurring in table </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="159" column="1" bodyfile="src/schemata/SubdivisionSchema.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdagSchema_1a4684a55125d5d0ef66d35bfd76a7da31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dagSchema::dagSchema</definition>
        <argsstring>()</argsstring>
        <name>dagSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="134" column="1" bodyfile="src/schemata/SubdivisionSchema.hpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga1762a1cf61c23100f58a69f092f94e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dagSchema::dagSchema</definition>
        <argsstring>(const ANode &amp;)</argsstring>
        <name>dagSchema</name>
        <param>
          <type>const <ref refid="classANode" kindref="compound">ANode</ref> &amp;</type>
          <defname>an</defname>
        </param>
        <briefdescription>
<para>translation of AND-OR alternating nested lists into dag-schemas </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="137" column="1" bodyfile="src/schemata/SubdivisionSchema.cpp" bodystart="45" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga7f1258e692e42b123b039e9aa1c256b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dagSchema::dagSchema</definition>
        <argsstring>(const ONode &amp;)</argsstring>
        <name>dagSchema</name>
        <param>
          <type>const <ref refid="classONode" kindref="compound">ONode</ref> &amp;</type>
          <defname>on</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="138" column="1" bodyfile="src/schemata/SubdivisionSchema.cpp" bodystart="74" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classdagSchema_1ade079e9d6738c9bb02123d6c3cf01331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int dagSchema::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="140" column="1" bodyfile="src/schemata/SubdivisionSchema.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classdagSchema_1af4e948da7d717f8f4600f0e9dcdadec1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int dagSchema::max</definition>
        <argsstring>(const dagSchema &amp;lhs, const dagSchema &amp;rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classdagSchema" kindref="compound">dagSchema</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classdagSchema" kindref="compound">dagSchema</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="142" column="1" bodyfile="src/schemata/SubdivisionSchema.hpp" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga0dc3e9cf7edbc289976639574ca23d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dagSchema::add</definition>
        <argsstring>(const ds_transition &amp;dst)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structds__transition" kindref="compound">ds_transition</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>for testing. do not use </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="151" column="1" bodyfile="src/schemata/SubdivisionSchema.cpp" bodystart="110" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__schemata_1ga5d904f7412e4bd1263f5369115f910d3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dagSchema::rename</definition>
        <argsstring>(unsigned int i, unsigned int j)</argsstring>
        <name>rename</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>rename state i into state j </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="162" column="1" bodyfile="src/schemata/SubdivisionSchema.cpp" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga942b88d2618ccf43acea8b95cd34d96d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dagSchema::shift</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>shift</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>rename every state s into s + n the result is not a dag-schema </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="166" column="1" bodyfile="src/schemata/SubdivisionSchema.cpp" bodystart="124" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1gaeb6128c3a43d7b6fa5996e8830b4860a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dagSchema::shift0</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>shift0</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>rename every state s into s + n except 0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/SubdivisionSchema.hpp" line="169" column="1" bodyfile="src/schemata/SubdivisionSchema.cpp" bodystart="133" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>dag whose edges are labeled by arity values two distinguished nodes: </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>a source node: 0</para>
</listitem><listitem><para>a target node: _max_state </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="src/schemata/SubdivisionSchema.hpp" line="132" column="1" bodyfile="src/schemata/SubdivisionSchema.hpp" bodystart="131" bodyend="170"/>
    <listofallmembers>
      <member refid="classdagSchema_1a0a042c6b5178777b1d20c34c193dd03f" prot="private" virt="non-virtual"><scope>dagSchema</scope><name>_max_state</name></member>
      <member refid="classdagSchema_1ab07c5c783ae1635f1adf99dd51254c40" prot="private" virt="non-virtual"><scope>dagSchema</scope><name>_table</name></member>
      <member refid="group__schemata_1ga0dc3e9cf7edbc289976639574ca23d20" prot="public" virt="non-virtual"><scope>dagSchema</scope><name>add</name></member>
      <member refid="classdagSchema_1a4684a55125d5d0ef66d35bfd76a7da31" prot="public" virt="non-virtual"><scope>dagSchema</scope><name>dagSchema</name></member>
      <member refid="group__schemata_1ga1762a1cf61c23100f58a69f092f94e27" prot="public" virt="non-virtual"><scope>dagSchema</scope><name>dagSchema</name></member>
      <member refid="group__schemata_1ga7f1258e692e42b123b039e9aa1c256b8" prot="public" virt="non-virtual"><scope>dagSchema</scope><name>dagSchema</name></member>
      <member refid="classdagSchema_1ade079e9d6738c9bb02123d6c3cf01331" prot="public" virt="non-virtual"><scope>dagSchema</scope><name>max</name></member>
      <member refid="classdagSchema_1af4e948da7d717f8f4600f0e9dcdadec1" prot="public" virt="non-virtual"><scope>dagSchema</scope><name>max</name></member>
      <member refid="group__schemata_1ga5d904f7412e4bd1263f5369115f910d3" prot="private" virt="non-virtual"><scope>dagSchema</scope><name>rename</name></member>
      <member refid="group__schemata_1ga942b88d2618ccf43acea8b95cd34d96d" prot="private" virt="non-virtual"><scope>dagSchema</scope><name>shift</name></member>
      <member refid="group__schemata_1gaeb6128c3a43d7b6fa5996e8830b4860a" prot="private" virt="non-virtual"><scope>dagSchema</scope><name>shift0</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
