<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__table" kind="group">
    <compoundname>table</compoundname>
    <title>Table module</title>
    <innerclass refid="classParser" prot="public">Parser</innerclass>
    <innerclass refid="classAtable" prot="public">Atable</innerclass>
    <innerclass refid="classBrecord" prot="public">Brecord</innerclass>
    <innerclass refid="classKrecord" prot="public">Krecord</innerclass>
    <innerclass refid="classPointer" prot="public">Pointer</innerclass>
    <innerclass refid="classSpointer" prot="public">Spointer</innerclass>
    <innerclass refid="structSpointerHasher" prot="public">SpointerHasher</innerclass>
    <innerclass refid="classSIpointer" prot="public">SIpointer</innerclass>
    <innerclass refid="structSIpointerHasher" prot="public">SIpointerHasher</innerclass>
    <innerclass refid="classSIPpointer" prot="public">SIPpointer</innerclass>
    <innerclass refid="structSIPpointerHasher" prot="public">SIPpointerHasher</innerclass>
    <innerclass refid="classSKpointer" prot="public">SKpointer</innerclass>
    <innerclass refid="structSKpointerHasher" prot="public">SKpointerHasher</innerclass>
    <innerclass refid="classSKIPpointer" prot="public">SKIPpointer</innerclass>
    <innerclass refid="structSKIPpointerHasher" prot="public">SKIPpointerHasher</innerclass>
    <innerclass refid="classRecord" prot="public">Record</innerclass>
    <innerclass refid="classRun" prot="public">Run</innerclass>
    <innerclass refid="classTable" prot="public">Table</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__table_1gab0f46315460c3a5ebd31a85b96a5bd52" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; bool(const <ref refid="classRun" kindref="compound">Run</ref>&lt; P &gt; *, const <ref refid="classRun" kindref="compound">Run</ref>&lt; P &gt; *)&gt;</type>
        <definition>using RunCompare =  std::function&lt;bool(const Run&lt;P&gt;*, const Run&lt;P&gt;*)&gt;</definition>
        <argsstring></argsstring>
        <name>RunCompare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Rune.hpp" line="33" column="1" bodyfile="src/table/Rune.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__table_1ga72ef50ecaa053517b9a0248d9fd8b942" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>class R</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; P, R, H &gt;</type>
        <definition>using MapRecord =  std::unordered_map&lt;P,R,H&gt;</definition>
        <argsstring></argsstring>
        <name>MapRecord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Table.hpp" line="34" column="1" bodyfile="src/table/Table.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__table_1ga1a3458aadde4572a615622fa95c4216d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>std::unordered_multimap&lt; P, P, H &gt;</type>
        <definition>using MapInstances =  std::unordered_multimap&lt;P,P,H&gt;</definition>
        <argsstring></argsstring>
        <name>MapInstances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Table.hpp" line="38" column="1" bodyfile="src/table/Table.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__table_1gac5d18d8c7a8e65bf58d4bc2446202f4f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>RunCompare&lt; P &gt;</type>
        <definition>RunCompare&lt;P&gt; weightMin</definition>
        <argsstring></argsstring>
        <name>weightMin</name>
        <initializer>=
[](const <ref refid="classRun" kindref="compound">Run</ref>&lt;P&gt;* lhs, const <ref refid="classRun" kindref="compound">Run</ref>&lt;P&gt;* rhs)
{
    assert (lhs);
    assert (rhs);
    if (rhs-&gt;partial())
    {
        return false;
    }
    else
    {
        if (lhs-&gt;partial()) return true;
        return (lhs-&gt;weight &gt; rhs-&gt;weight);
    }
}</initializer>
        <briefdescription>
<para>one ordering for k-best to select the min weight <ref refid="classRun" kindref="compound">Run</ref> where partial run is considered to be the lowest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Rune.hpp" line="316" column="1" bodyfile="src/table/Rune.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__table_1ga27170c8c3df71e6854ca3becc034ea09" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>RunCompare&lt; P &gt;</type>
        <definition>RunCompare&lt;P&gt; weightMax</definition>
        <argsstring></argsstring>
        <name>weightMax</name>
        <initializer>=
[](const <ref refid="classRun" kindref="compound">Run</ref>&lt;P&gt;* lhs, const <ref refid="classRun" kindref="compound">Run</ref>&lt;P&gt;* rhs)
{
    assert (lhs);
    assert (rhs);
    if (lhs-&gt;partial())
    {
        return false;
        
        
    }
    else
    {
        if (rhs-&gt;partial()) return true;
        else return (lhs-&gt;weight &lt; rhs-&gt;weight);
    }
}</initializer>
        <briefdescription>
<para>one ordering for k-best to select the max weight run where partial run is considered to be the highest </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Rune.hpp" line="336" column="1" bodyfile="src/table/Rune.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__table_1gad263d9daed9b87d43b2197cac98bced2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const Spointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.cpp" line="145" column="1" bodyfile="src/table/PtrS.cpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga86a37eaf8509fee42b0cecf04740db9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const SIpointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.cpp" line="353" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="353" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga7576e987b23cc05f8c50602b5fbe5fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const SIPpointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.cpp" line="397" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="397" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga408ad7443ca740b3f261b7ef920bc26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const SKpointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.cpp" line="106" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga015154c0d3f197a32544c20ea2f70c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const SKIPpointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.cpp" line="146" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="146" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga4ca596fe52abd36d550a10818678d54c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Pointer::terminalWeight</definition>
        <argsstring>(const InputSegment *, const Transition &amp;) const</argsstring>
        <name>terminalWeight</name>
        <reimplementedby refid="group__table_1ga6b46b59b3b465ba6a995f76ff34970ce">terminalWeight</reimplementedby>
        <reimplementedby refid="group__table_1ga01caac75d66ff2e272a248c7e1954415">terminalWeight</reimplementedby>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>tr</defname>
        </param>
        <briefdescription>
<para>return the weight for a terminal <ref refid="classRun" kindref="compound">Run</ref> associated to the given <ref refid="classTransition" kindref="compound">Transition</ref>. The transition must be terminal. This pointer must be compatible with the <ref refid="classTransition" kindref="compound">Transition</ref>. input segment can be NULL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="231" column="1" bodyfile="src/table/Ptr.cpp" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gad709430d698804267807f12deba9952b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight Pointer::innerWeight</definition>
        <argsstring>(const Transition &amp;) const</argsstring>
        <name>innerWeight</name>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>tr</defname>
        </param>
        <briefdescription>
<para>return the initial weight for an inner <ref refid="classRun" kindref="compound">Run</ref> associated to the given <ref refid="classTransition" kindref="compound">Transition</ref>. the weight will have to be multiplied with all the weights of subruns. the transition must be inner. this pointer must be divisible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="238" column="1" bodyfile="src/table/Ptr.cpp" bodystart="25" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga467ee6f93cd0429edb40fc4de100c3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>()</argsstring>
        <name>Spointer</name>
        <briefdescription>
<para>specific </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="51" column="1" bodyfile="src/table/PtrS.cpp" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaad8a647a58df31aefd8f2703b9f86dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(label_t)</argsstring>
        <name>Spointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>specific </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="54" column="1" bodyfile="src/table/PtrS.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga49f82b7aafd3ae237243c85272597fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(WTA *a, Environment *env, pre_t pre=0, pre_t post=0, Rational mlen=Rational(1), size_t k=1)</argsstring>
        <name>Spointer</name>
        <param>
          <type><ref refid="classWTA" kindref="compound">WTA</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mlen</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>top ptr (head of the main <ref refid="classRun" kindref="compound">Run</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bar</parametername>
</parameternamelist>
<parameterdescription>
<para>must be true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>must be 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000032"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR deprecated (replace by specific constructor) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="63" column="1" bodyfile="src/table/PtrS.cpp" bodystart="25" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga72441f0d67497c90602a123c45dc53d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(Environment *env, const Spointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>Spointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>must have a wta state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>if a&gt;0 and i=0, construct a copy of p. if a&gt;0 and 0&lt;i&lt;=a, construct a copy a ptr with state s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="75" column="1" bodyfile="src/table/PtrS.cpp" bodystart="44" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaf40e1a1f0edc608d4413f096a19aae78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(const Spointer &amp;)</argsstring>
        <name>Spointer</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="79" column="1" bodyfile="src/table/PtrS.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac303715911a48c482acb6ae4188508d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(const Spointer &amp;p0, const Spointer &amp;p1)</argsstring>
        <name>Spointer</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p1 must be partial. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="84" column="1" bodyfile="src/table/PtrS.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gad078973f8318ccf5800db79e87584dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(const Spointer &amp;p, const Spointer &amp;p0, const Spointer &amp;p1)</argsstring>
        <name>Spointer</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p must be partial. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="89" column="1" bodyfile="src/table/PtrS.cpp" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga88eb3c521aa1c9bc9b8891f20b9a01eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
        <definition>Spointer &amp; Spointer::operator=</definition>
        <argsstring>(const Spointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="92" column="1" bodyfile="src/table/PtrS.cpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gacb9d4d8e3da8a1e082b80fd31abb9772" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::operator==</definition>
        <argsstring>(const Spointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a unorered_multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="96" column="1" bodyfile="src/table/PtrS.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga797b376c9ed1b4777ea94ff8350c65c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::operator&lt;</definition>
        <argsstring>(const Spointer &amp;) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="100" column="1" bodyfile="src/table/PtrS.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga718cc6f7473c3fb1b074211bf2f16d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::instance</definition>
        <argsstring>(const Spointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="103" column="1" bodyfile="src/table/PtrS.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga06fa67855bfb50d81e18bdfacce965ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::subsume</definition>
        <argsstring>(const Spointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="105" column="1" bodyfile="src/table/PtrS.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gace5bd2026fef480084f3cc5dc28086f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::complete</definition>
        <argsstring>() const</argsstring>
        <name>complete</name>
        <reimplements refid="classPointer_1a3fa3fb5df21abf35c02c321611d85a3c">complete</reimplements>
        <reimplementedby refid="group__table_1ga638627bc96caa0f1dbf7093f0f70951b">complete</reimplementedby>
        <reimplementedby refid="group__table_1ga2f95b5a2058b20744a00737b1240bc83">complete</reimplementedby>
        <briefdescription>
<para>the pointer is complete i.e. all fields are set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="111" column="1" bodyfile="src/table/PtrS.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga0a994ec6827ef23556b500382fc5a1fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::dummy</definition>
        <argsstring>() const</argsstring>
        <name>dummy</name>
        <reimplements refid="classPointer_1afa7a38cfee7181aa05e3634a15066135">dummy</reimplements>
        <reimplementedby refid="group__table_1ga555753e41af94ac201a0c8c99babb83b">dummy</reimplementedby>
        <reimplementedby refid="group__table_1gaf830b0bf9d24b53e4674de49308b7853">dummy</reimplementedby>
        <briefdescription>
<para>return whether this pointer is a dummy pointer i.e. it was constructed with P() default false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="115" column="1" bodyfile="src/table/PtrS.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga15067ad809b5ac25b45c0187550e0b17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        <definition>label_t Spointer::label</definition>
        <argsstring>(const Transition &amp;t) const</argsstring>
        <name>label</name>
        <reimplements refid="classPointer_1a767e1ca8f18a9cf07eaca5ae44f689cf">label</reimplements>
        <reimplementedby refid="group__table_1ga6bdbea8e7013194f834be17932efe642">label</reimplementedby>
        <reimplementedby refid="group__table_1ga7f7cd8ae86d71b147fc662d3cc4977c0">label</reimplementedby>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>return a concrete label value corresponding to this pointer when considered as a leaf position, using the label of the given transition. the given transition must be terminal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="113" column="1" bodyfile="src/table/PtrS.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga54817fbae1688dab4dfff5724e762640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::divisible</definition>
        <argsstring>() const</argsstring>
        <name>divisible</name>
        <reimplements refid="classPointer_1a51529c3e4714cafc28ba07da36078618">divisible</reimplements>
        <reimplementedby refid="group__table_1gac83e0619c17ce4efd589f73513706a6b">divisible</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this pointer must have a <ref refid="classWTA" kindref="compound">WTA</ref> state always return true in that case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="119" column="1" bodyfile="src/table/PtrS.cpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga7e962d8567566398e5f620ef964267cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>()</argsstring>
        <name>SIpointer</name>
        <briefdescription>
<para>dummy ptr </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="42" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga464163b749ecd94516ab6e94f7baa5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(label_t)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>fake ptr for terminal run, contains only a label symbol it is considered as complete see description in Ptr.hpp </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="47" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac560506e7bf1439877178cf6d2459e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(Environment *env, state_t s, Rational mdur=Rational(1), double rext=0)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rext</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>class specific top ptr (covering the whole input segment + given extension in realtime, of given musical duration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>must contain an input segment and interval heap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="53" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="30" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3abe73f8e3188ca49f11e09d794f1f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(Environment *, const SIpointer &amp;p, double rdur, Rational mdur, bool position, size_t i, state_t s)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rdur</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>position</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>split ptr p in 2 parts. </para>
        </briefdescription>
        <detaileddescription>
<para>if position = 0, first part has (real-time/musical-time) durations rdur/mdur</para>
<para>if position = 1, second part has (real-time/musical-time) durations rdur/mdur construct part number i (1 or 2) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>must contain an input segment and interval heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <ref refid="classWTA" kindref="compound">WTA</ref> state or Meta state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="71" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="46" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gab5c8a8654ef626d4c7b75ef67ed28aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(Environment *, const SIpointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>SIpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="80" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="76" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3df3168789d247e497f127caa7840e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(const SIpointer &amp;)</argsstring>
        <name>SIpointer</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="86" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga175406f6e30433d90a004aa27c401f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(const SIpointer &amp;p, const SIpointer &amp;p0, const SIpointer &amp;p1)</argsstring>
        <name>SIpointer</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="90" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga19a6965aca9363f90f45c5d0e07bc99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIpointer::SIpointer</definition>
        <argsstring>(const SIpointer &amp;p0, const SIpointer &amp;p1)</argsstring>
        <name>SIpointer</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="96" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga071bb69977a62e26f9ec11230ae2646b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
        <definition>SIpointer &amp; SIpointer::operator=</definition>
        <argsstring>(const SIpointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="99" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gacc34f81b5d73c93840bce279ddde4620" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIpointer::equal_node</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>equal_node</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="156" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="150" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3330f8e59b08797b4c73ae558f6d588e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::operator==</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a unordered_multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="103" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga303c4da57a70fa07b7a2de3692fc9091" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::operator!=</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="104" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga51c64ecf271622a259840f55236778ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::operator&lt;</definition>
        <argsstring>(const SIpointer &amp;) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="108" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="183" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga259b23462f7e87f6df0e9361c1884618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::instance</definition>
        <argsstring>(const SIpointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="111" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaa50fe6e651b28c77839ddfaf1bbdcd4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::subsume</definition>
        <argsstring>(const SIpointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSIpointer" kindref="compound">SIpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="114" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga638627bc96caa0f1dbf7093f0f70951b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::complete</definition>
        <argsstring>() const</argsstring>
        <name>complete</name>
        <reimplements refid="group__table_1gace5bd2026fef480084f3cc5dc28086f3">complete</reimplements>
        <reimplementedby refid="group__table_1ga2f95b5a2058b20744a00737b1240bc83">complete</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="122" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga6bdbea8e7013194f834be17932efe642" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        <definition>label_t SIpointer::label</definition>
        <argsstring>(const Transition &amp;t) const</argsstring>
        <name>label</name>
        <reimplements refid="group__table_1ga15067ad809b5ac25b45c0187550e0b17">label</reimplements>
        <reimplementedby refid="group__table_1ga7f7cd8ae86d71b147fc662d3cc4977c0">label</reimplementedby>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp the _pre value must be known _node must be set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="127" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac83e0619c17ce4efd589f73513706a6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::divisible</definition>
        <argsstring>() const</argsstring>
        <name>divisible</name>
        <reimplements refid="group__table_1ga54817fbae1688dab4dfff5724e762640">divisible</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp</para>
</simplesect>
if this pointer has a <ref refid="classWTA" kindref="compound">WTA</ref> state: it is not worth descending when this pointer corresponds to an input sub-segment not inhabited.</para>
<para>if this pointer has a Meta state: it is not worth descending when this ptr corresponds to an empty segment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="138" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaca7d3c4d141ecf2874a5e5512e0c02ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::compatible</definition>
        <argsstring>(const label_t, bool abstract=true) const</argsstring>
        <name>compatible</name>
        <reimplements refid="classPointer_1a7b636072b492b57efe3ead47e03a67bd">compatible</reimplements>
        <reimplementedby refid="group__table_1gabf87df773f8e0f628e0bae79e88097db">compatible</reimplementedby>
        <param>
          <type>const <ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>label</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>abstract</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="141" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="268" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga555753e41af94ac201a0c8c99babb83b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIpointer::dummy</definition>
        <argsstring>() const</argsstring>
        <name>dummy</name>
        <reimplements refid="group__table_1ga0a994ec6827ef23556b500382fc5a1fc">dummy</reimplements>
        <reimplementedby refid="group__table_1gaf830b0bf9d24b53e4674de49308b7853">dummy</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="144" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga6b46b59b3b465ba6a995f76ff34970ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight SIpointer::terminalWeight</definition>
        <argsstring>(const InputSegment *, const Transition &amp;) const</argsstring>
        <name>terminalWeight</name>
        <reimplements refid="group__table_1ga4ca596fe52abd36d550a10818678d54c">terminalWeight</reimplements>
        <reimplementedby refid="group__table_1ga01caac75d66ff2e272a248c7e1954415">terminalWeight</reimplementedby>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <defname>tr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>input segment must not be NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSI.hpp" line="148" column="1" bodyfile="src/table/PtrSI.cpp" bodystart="308" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac498892cd08ebd0663899dc82b00fac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(pre_t pre=PP_UNKNOWN, pre_t post=PP_UNKNOWN)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>PP_UNKNOWN</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>PP_UNKNOWN</defval>
        </param>
        <briefdescription>
<para>dummy ptr. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="53" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="15" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gafcef62ae9e6a74448beec7ac040f6d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(label_t)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>fake ptr for terminal run, contains only a label symbol. it is considered as complete </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="58" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga5470d875405a71931e2349915201da20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(Environment *env, state_t s, pre_t pre=0, pre_t post=0, Rational mdur=Rational(1), double rext=0)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rext</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>class specific top ptr (covering the whole input segment </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>given extension in realtime.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>must contain an input segment and interval heap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="66" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="32" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaeea3246bf0f27b8b4a0a930f7d1a4379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(Environment *, const SIPpointer &amp;p, double rdur, Rational mdur, bool position, size_t i, state_t s)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rdur</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>position</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>split ptr p in 2 parts. </para>
        </briefdescription>
        <detaileddescription>
<para>if position = 0, first part has (real-time/musical-time) durations rdur/mdur</para>
<para>if position = 1, second part has (real-time/musical-time) durations rdur/mdur</para>
<para>construct part number i (1 or 2) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>must contain an input segment and interval heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>(state) can be <ref refid="classWTA" kindref="compound">WTA</ref> or Meta. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="87" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="48" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gad83be64e20b13419994b3e9ae23654d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(Environment *, const SIPpointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="96" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="77" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga32c45b7b04d59e932c5b43ba03b47b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(const SIPpointer &amp;)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="102" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaa4c3c43c081bf789120e96683bc70cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(const SIPpointer &amp;p, const SIPpointer &amp;p0, const SIPpointer &amp;p1)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="106" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="139" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga12c22407821e96d6c7d0bca88392cbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIPpointer::SIPpointer</definition>
        <argsstring>(const SIPpointer &amp;p0, const SIPpointer &amp;p1)</argsstring>
        <name>SIPpointer</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="112" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga9855eef9600bbdd1e74343844e0c158c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
        <definition>SIPpointer &amp; SIPpointer::operator=</definition>
        <argsstring>(const SIPpointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="115" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="170" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga519f21be86b2ddb4fae2bab869434863" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::operator==</definition>
        <argsstring>(const SIPpointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a unordered_multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="119" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga58f25245c42e16d11738e74c66a63cf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::operator!=</definition>
        <argsstring>(const SIPpointer &amp;) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="120" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaefff5ba3579bd6174700ab1462fa13fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::operator&lt;</definition>
        <argsstring>(const SIPpointer &amp;) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="124" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="198" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gad7e14d03ea63991d16a0da5292eda82d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::instance</definition>
        <argsstring>(const SIPpointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="127" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="247" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gae02f880deb0305e3122caf05f9d2bad0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::subsume</definition>
        <argsstring>(const SIPpointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSIPpointer" kindref="compound">SIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="130" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga2f95b5a2058b20744a00737b1240bc83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::complete</definition>
        <argsstring>() const</argsstring>
        <name>complete</name>
        <reimplements refid="group__table_1ga638627bc96caa0f1dbf7093f0f70951b">complete</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="140" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga7f7cd8ae86d71b147fc662d3cc4977c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        <definition>label_t SIPpointer::label</definition>
        <argsstring>(const Transition &amp;t) const</argsstring>
        <name>label</name>
        <reimplements refid="group__table_1ga6bdbea8e7013194f834be17932efe642">label</reimplements>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>the _pre value must be known </para>
</simplesect>
<simplesect kind="warning"><para>_node must be set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="145" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="280" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gabf87df773f8e0f628e0bae79e88097db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::compatible</definition>
        <argsstring>(const label_t, bool abstract=true) const</argsstring>
        <name>compatible</name>
        <reimplements refid="group__table_1gaca7d3c4d141ecf2874a5e5512e0c02ff">compatible</reimplements>
        <param>
          <type>const <ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>label</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>abstract</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="152" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="293" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaf830b0bf9d24b53e4674de49308b7853" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SIPpointer::dummy</definition>
        <argsstring>() const</argsstring>
        <name>dummy</name>
        <reimplements refid="group__table_1ga555753e41af94ac201a0c8c99babb83b">dummy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="155" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="338" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga01caac75d66ff2e272a248c7e1954415" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classWeight" kindref="compound">Weight</ref></type>
        <definition>Weight SIPpointer::terminalWeight</definition>
        <argsstring>(const InputSegment *s, const Transition &amp;t) const</argsstring>
        <name>terminalWeight</name>
        <reimplements refid="group__table_1ga6b46b59b3b465ba6a995f76ff34970ce">terminalWeight</reimplements>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>input segment must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSIP.hpp" line="159" column="1" bodyfile="src/table/PtrSIP.cpp" bodystart="348" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaffcc41d2b1b8a85e3ea9acd3086321f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>()</argsstring>
        <name>SKpointer</name>
        <briefdescription>
<para>specific </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="45" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga876c1101716f9aea625574f9be9b3da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>(label_t, size_t k=1)</argsstring>
        <name>SKpointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>specific </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="48" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga022b6998c4273e2da8128ccd2205a7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>(WTA *a, Environment *env, pre_t pre=0, pre_t post=0, Rational mlen=Rational(1), size_t k=1)</argsstring>
        <name>SKpointer</name>
        <param>
          <type><ref refid="classWTA" kindref="compound">WTA</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mlen</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>top ptr. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bar</parametername>
</parameternamelist>
<parameterdescription>
<para>must be true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000033"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR deprecated (replace by specific constructor) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="54" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="25" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac3044b001a0035c0ea79ffac0a57d1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>(Environment *, const SKpointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>SKpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <defname>env</defname>
        </param>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>no default duration for ambiguity reasons. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="63" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gae5dd2d6c4dde18082b5e20e34ead8bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>(const SKpointer &amp;)</argsstring>
        <name>SKpointer</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="69" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaf762b88808d2e8188b74e28256d3ed09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>(const SKpointer &amp;p0, const SKpointer &amp;p1)</argsstring>
        <name>SKpointer</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p1 must be partial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="75" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga8c3f64b049fb3809bec46ba47a124ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKpointer::SKpointer</definition>
        <argsstring>(const SKpointer &amp;p, const SKpointer &amp;p0, const SKpointer &amp;p1)</argsstring>
        <name>SKpointer</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p must be partial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="80" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaa75ae4ae4ce8c389471867fa64f503c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
        <definition>SKpointer &amp; SKpointer::operator=</definition>
        <argsstring>(const SKpointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="83" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gab77c2fa945fcc938568ace9986c25324" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SKpointer::operator==</definition>
        <argsstring>(const SKpointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="86" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga95bdb4d9654b477a82f61d4e8b1d6937" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SKpointer::instance</definition>
        <argsstring>(const SKpointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="89" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga38150ffb7a8bf25ebf5133907d568738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SKpointer::subsume</definition>
        <argsstring>(const SKpointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSKpointer" kindref="compound">SKpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="92" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga560a9c964dcc9ad7631213d6ad061a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SKpointer::incr</definition>
        <argsstring>()</argsstring>
        <name>incr</name>
        <reimplements refid="classPointer_1a02c73f5f2b21a1fe37b744383508cb64">incr</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSK.hpp" line="98" column="1" bodyfile="src/table/PtrSK.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga24e762a60a81030599decff93dc1a1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>()</argsstring>
        <name>SKIPpointer</name>
        <briefdescription>
<para>dummy ptr. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="34" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga1fc4cd4038153502277d11c5607a14fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(label_t, size_t k=1)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>specific fake ptr for terminal run, contains only a label symbol. it is considered as complete </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="40" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gab217454122f2ec0af5c16bb1ae996925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(Environment *env, pre_t pre=0, pre_t post=0, bool bar=false, size_t k=1)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bar</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000034"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR deprecated </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="43" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga8a29b4e0af8d4fc8d298b7027e4cf638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(Environment *env, state_t s, pre_t pre=0, pre_t post=0, Rational mdur=Rational(1), size_t k=1)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>class specific top ptr (covering the whole input segment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>env must contain an input segment and interval heap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="52" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="40" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga6cd275122aebf4288f5d60c36a141116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(Environment *env, const SKIPpointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>no default duration for ambiguity reasons </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="62" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga3366b26b81c9cb040716918f7d375879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(const SKIPpointer &amp;)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="68" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga5dd0fd6fd23ca132973ec5f76a7f568d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(const SKIPpointer &amp;p0, const SKIPpointer &amp;p1)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p1 must be partial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="74" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga8b87b18aa76b4021da6d3421c738b002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SKIPpointer::SKIPpointer</definition>
        <argsstring>(const SKIPpointer &amp;p, const SKIPpointer &amp;p0, const SKIPpointer &amp;p1)</argsstring>
        <name>SKIPpointer</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p must be partial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="79" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga54d7c5b3e7aa20e48ff8d15e9e0895f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
        <definition>SKIPpointer &amp; SKIPpointer::operator=</definition>
        <argsstring>(const SKIPpointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="82" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga4ecc91594489358cf7abdbf8cfd245a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SKIPpointer::operator==</definition>
        <argsstring>(const SKIPpointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="85" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaa9ccc9cf48974dca2a09ca4aa6092d43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SKIPpointer::instance</definition>
        <argsstring>(const SKIPpointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="88" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="112" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaacf829ba5696414bdcc753e97e76a7f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SKIPpointer::subsume</definition>
        <argsstring>(const SKIPpointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSKIPpointer" kindref="compound">SKIPpointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="91" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac0c72ab0a91e652b38eb815206b0baa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SKIPpointer::incr</definition>
        <argsstring>()</argsstring>
        <name>incr</name>
        <reimplements refid="classPointer_1a02c73f5f2b21a1fe37b744383508cb64">incr</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrSKIP.hpp" line="97" column="1" bodyfile="src/table/PtrSKIP.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__table_1ga87af6cf583d4ad6776fb6d5547cecdf0" prot="public" static="no">
        <name>PTR_LPAR</name>
        <initializer>&apos;(&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="15" column="9" bodyfile="src/table/Ptr.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__table_1ga872ca8d837f318949c33691219969c5b" prot="public" static="no">
        <name>PTR_RPAR</name>
        <initializer>&apos;)&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/Ptr.hpp" line="16" column="9" bodyfile="src/table/Ptr.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <computeroutput>table</computeroutput> module contains classes for parse tables and their content. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
