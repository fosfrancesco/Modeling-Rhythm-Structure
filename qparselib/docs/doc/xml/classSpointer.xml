<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classSpointer" kind="class" language="C++" prot="public">
    <compoundname>Spointer</compoundname>
    <basecompoundref refid="classPointer" prot="public" virt="non-virtual">Pointer</basecompoundref>
    <derivedcompoundref refid="classSIpointer" prot="public" virt="non-virtual">SIpointer</derivedcompoundref>
    <derivedcompoundref refid="classSKpointer" prot="public" virt="non-virtual">SKpointer</derivedcompoundref>
    <includes local="no">PtrS.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classSpointer_1a27f37ac70c70f90d9a4a576606bb52e1" prot="protected" static="no" mutable="no">
        <type>state_t</type>
        <definition>state_t Spointer::_state</definition>
        <argsstring></argsstring>
        <name>_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="124" column="1" bodyfile="src/table/PtrS.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__table_1ga467ee6f93cd0429edb40fc4de100c3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>()</argsstring>
        <name>Spointer</name>
        <briefdescription>
<para>specific </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="51" column="1" bodyfile="src/table/PtrS.cpp" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaad8a647a58df31aefd8f2703b9f86dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(label_t)</argsstring>
        <name>Spointer</name>
        <param>
          <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>specific </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="54" column="1" bodyfile="src/table/PtrS.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga49f82b7aafd3ae237243c85272597fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(WTA *a, Environment *env, pre_t pre=0, pre_t post=0, Rational mlen=Rational(1), size_t k=1)</argsstring>
        <name>Spointer</name>
        <param>
          <type><ref refid="classWTA" kindref="compound">WTA</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mlen</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>top ptr (head of the main <ref refid="classRun" kindref="compound">Run</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bar</parametername>
</parameternamelist>
<parameterdescription>
<para>must be true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>must be 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000032"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR deprecated (replace by specific constructor) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="63" column="1" bodyfile="src/table/PtrS.cpp" bodystart="25" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga72441f0d67497c90602a123c45dc53d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(Environment *env, const Spointer &amp;p, size_t a, size_t i, state_t s)</argsstring>
        <name>Spointer</name>
        <param>
          <type><ref refid="classEnvironment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>state_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sub-pointer or instance as leaf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>must have a wta state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>if a&gt;0 and i=0, construct a copy of p. if a&gt;0 and 0&lt;i&lt;=a, construct a copy a ptr with state s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="75" column="1" bodyfile="src/table/PtrS.cpp" bodystart="44" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gaf40e1a1f0edc608d4413f096a19aae78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(const Spointer &amp;)</argsstring>
        <name>Spointer</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="79" column="1" bodyfile="src/table/PtrS.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gac303715911a48c482acb6ae4188508d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(const Spointer &amp;p0, const Spointer &amp;p1)</argsstring>
        <name>Spointer</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>next sibling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p1 must be partial. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="84" column="1" bodyfile="src/table/PtrS.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gad078973f8318ccf5800db79e87584dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spointer::Spointer</definition>
        <argsstring>(const Spointer &amp;p, const Spointer &amp;p0, const Spointer &amp;p1)</argsstring>
        <name>Spointer</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>instance as parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
<simplesect kind="warning"><para>should not be called since p must be partial. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="89" column="1" bodyfile="src/table/PtrS.cpp" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga88eb3c521aa1c9bc9b8891f20b9a01eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
        <definition>Spointer &amp; Spointer::operator=</definition>
        <argsstring>(const Spointer &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="92" column="1" bodyfile="src/table/PtrS.cpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gacb9d4d8e3da8a1e082b80fd31abb9772" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::operator==</definition>
        <argsstring>(const Spointer &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a unorered_multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="96" column="1" bodyfile="src/table/PtrS.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga797b376c9ed1b4777ea94ff8350c65c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::operator&lt;</definition>
        <argsstring>(const Spointer &amp;) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>for use as key in a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="100" column="1" bodyfile="src/table/PtrS.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga718cc6f7473c3fb1b074211bf2f16d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::instance</definition>
        <argsstring>(const Spointer &amp;p) const</argsstring>
        <name>instance</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="103" column="1" bodyfile="src/table/PtrS.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga06fa67855bfb50d81e18bdfacce965ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::subsume</definition>
        <argsstring>(const Spointer &amp;p) const</argsstring>
        <name>subsume</name>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>description in Ptr.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="105" column="1" bodyfile="src/table/PtrS.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classSpointer_1aec852b63ae9427911ff290979bc0a4b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Spointer::has_S</definition>
        <argsstring>() const</argsstring>
        <name>has_S</name>
        <reimplements refid="classPointer_1a2a45530c7efca1b398d90a773fdb3c70">has_S</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="107" column="1" bodyfile="src/table/PtrS.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classSpointer_1a8fa50c04246ceb3a48e961946a2427f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>state_t</type>
        <definition>state_t Spointer::state</definition>
        <argsstring>() const</argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="109" column="1" bodyfile="src/table/PtrS.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1gace5bd2026fef480084f3cc5dc28086f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::complete</definition>
        <argsstring>() const</argsstring>
        <name>complete</name>
        <reimplements refid="classPointer_1a3fa3fb5df21abf35c02c321611d85a3c">complete</reimplements>
        <reimplementedby refid="group__table_1ga638627bc96caa0f1dbf7093f0f70951b">complete</reimplementedby>
        <reimplementedby refid="group__table_1ga2f95b5a2058b20744a00737b1240bc83">complete</reimplementedby>
        <briefdescription>
<para>the pointer is complete i.e. all fields are set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="111" column="1" bodyfile="src/table/PtrS.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga15067ad809b5ac25b45c0187550e0b17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__output_1ga22fde970e635fcf63962743b2d5c441d" kindref="member">label_t</ref></type>
        <definition>label_t Spointer::label</definition>
        <argsstring>(const Transition &amp;t) const</argsstring>
        <name>label</name>
        <reimplements refid="classPointer_1a767e1ca8f18a9cf07eaca5ae44f689cf">label</reimplements>
        <reimplementedby refid="group__table_1ga6bdbea8e7013194f834be17932efe642">label</reimplementedby>
        <reimplementedby refid="group__table_1ga7f7cd8ae86d71b147fc662d3cc4977c0">label</reimplementedby>
        <param>
          <type>const <ref refid="classTransition" kindref="compound">Transition</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>return a concrete label value corresponding to this pointer when considered as a leaf position, using the label of the given transition. the given transition must be terminal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="113" column="1" bodyfile="src/table/PtrS.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga0a994ec6827ef23556b500382fc5a1fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::dummy</definition>
        <argsstring>() const</argsstring>
        <name>dummy</name>
        <reimplements refid="classPointer_1afa7a38cfee7181aa05e3634a15066135">dummy</reimplements>
        <reimplementedby refid="group__table_1ga555753e41af94ac201a0c8c99babb83b">dummy</reimplementedby>
        <reimplementedby refid="group__table_1gaf830b0bf9d24b53e4674de49308b7853">dummy</reimplementedby>
        <briefdescription>
<para>return whether this pointer is a dummy pointer i.e. it was constructed with P() default false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="115" column="1" bodyfile="src/table/PtrS.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__table_1ga54817fbae1688dab4dfff5724e762640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Spointer::divisible</definition>
        <argsstring>() const</argsstring>
        <name>divisible</name>
        <reimplements refid="classPointer_1a51529c3e4714cafc28ba07da36078618">divisible</reimplements>
        <reimplementedby refid="group__table_1gac83e0619c17ce4efd589f73513706a6b">divisible</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this pointer must have a <ref refid="classWTA" kindref="compound">WTA</ref> state always return true in that case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="119" column="1" bodyfile="src/table/PtrS.cpp" bodystart="138" bodyend="142"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classSpointer_1ad263d9daed9b87d43b2197cac98bced2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const Spointer &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classSpointer" kindref="compound">Spointer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/table/PtrS.hpp" line="121" column="1" bodyfile="src/table/PtrS.cpp" bodystart="145" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>key in a parse table. </para>
    </briefdescription>
    <detaileddescription>
<para>pointer to a (best) run for 1-best parsing for standard <ref refid="classWTA" kindref="compound">WTA</ref>.</para>
<para>a <ref refid="classSpointer" kindref="compound">Spointer</ref> contains<itemizedlist>
<listitem><para>a state symbol: either<itemizedlist>
<listitem><para>a <ref refid="classWTA" kindref="compound">WTA</ref> state or</para>
</listitem><listitem><para>a leaf label or</para>
</listitem><listitem><para>a meta state</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>that defines two kind of pointers<itemizedlist>
<listitem><para>state pointer : points to a state of a <ref refid="classWTA" kindref="compound">WTA</ref></para>
</listitem><listitem><para>bar pointer : points to a solution for the n first bars in an input segment = a sequence of n solutions pointing to the initial state of <ref refid="classWTA" kindref="compound">WTA</ref>.</para>
</listitem></itemizedlist>
</para>
<para>all Spointers are complete </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="446">
        <label>SIpointer</label>
        <link refid="classSIpointer"/>
        <childnode refid="444" relation="public-inheritance">
        </childnode>
      </node>
      <node id="449">
        <label>SKpointer</label>
        <link refid="classSKpointer"/>
        <childnode refid="444" relation="public-inheritance">
        </childnode>
      </node>
      <node id="445">
        <label>Pointer</label>
        <link refid="classPointer"/>
      </node>
      <node id="448">
        <label>SKIPpointer</label>
        <link refid="classSKIPpointer"/>
        <childnode refid="447" relation="public-inheritance">
        </childnode>
      </node>
      <node id="444">
        <label>Spointer</label>
        <link refid="classSpointer"/>
        <childnode refid="445" relation="public-inheritance">
        </childnode>
      </node>
      <node id="447">
        <label>SIPpointer</label>
        <link refid="classSIPpointer"/>
        <childnode refid="446" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="451">
        <label>Pointer</label>
        <link refid="classPointer"/>
      </node>
      <node id="450">
        <label>Spointer</label>
        <link refid="classSpointer"/>
        <childnode refid="451" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/table/PtrS.hpp" line="48" column="1" bodyfile="src/table/PtrS.hpp" bodystart="47" bodyend="125"/>
    <listofallmembers>
      <member refid="classSpointer_1a27f37ac70c70f90d9a4a576606bb52e1" prot="protected" virt="non-virtual"><scope>Spointer</scope><name>_state</name></member>
      <member refid="classPointer_1a7b636072b492b57efe3ead47e03a67bd" prot="public" virt="virtual"><scope>Spointer</scope><name>compatible</name></member>
      <member refid="group__table_1gace5bd2026fef480084f3cc5dc28086f3" prot="public" virt="virtual"><scope>Spointer</scope><name>complete</name></member>
      <member refid="group__table_1ga54817fbae1688dab4dfff5724e762640" prot="public" virt="virtual"><scope>Spointer</scope><name>divisible</name></member>
      <member refid="group__table_1ga0a994ec6827ef23556b500382fc5a1fc" prot="public" virt="virtual"><scope>Spointer</scope><name>dummy</name></member>
      <member refid="classPointer_1a7018d6fde0393288fbd7ed5c1ffe9e5b" prot="public" virt="virtual"><scope>Spointer</scope><name>has_I</name></member>
      <member refid="classPointer_1a66999c2d23c4b592228f1e74a96e0315" prot="public" virt="virtual"><scope>Spointer</scope><name>has_K</name></member>
      <member refid="classPointer_1a96063327a69b47d288f345b0d2f4b42b" prot="public" virt="virtual"><scope>Spointer</scope><name>has_P</name></member>
      <member refid="classSpointer_1aec852b63ae9427911ff290979bc0a4b4" prot="public" virt="virtual"><scope>Spointer</scope><name>has_S</name></member>
      <member refid="classPointer_1a02c73f5f2b21a1fe37b744383508cb64" prot="public" virt="virtual"><scope>Spointer</scope><name>incr</name></member>
      <member refid="group__table_1gad709430d698804267807f12deba9952b" prot="public" virt="virtual"><scope>Spointer</scope><name>innerWeight</name></member>
      <member refid="group__table_1ga718cc6f7473c3fb1b074211bf2f16d8b" prot="public" virt="virtual"><scope>Spointer</scope><name>instance</name></member>
      <member refid="group__table_1ga15067ad809b5ac25b45c0187550e0b17" prot="public" virt="virtual"><scope>Spointer</scope><name>label</name></member>
      <member refid="group__table_1ga797b376c9ed1b4777ea94ff8350c65c8" prot="public" virt="virtual"><scope>Spointer</scope><name>operator&lt;</name></member>
      <member refid="classSpointer_1ad263d9daed9b87d43b2197cac98bced2" prot="public" virt="non-virtual"><scope>Spointer</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__table_1ga88eb3c521aa1c9bc9b8891f20b9a01eb" prot="public" virt="virtual"><scope>Spointer</scope><name>operator=</name></member>
      <member refid="group__table_1gacb9d4d8e3da8a1e082b80fd31abb9772" prot="public" virt="virtual"><scope>Spointer</scope><name>operator==</name></member>
      <member refid="classPointer_1aa682c210e4ae3ef7268db1ee5bcf9f9d" prot="public" virt="non-virtual"><scope>Spointer</scope><name>partial</name></member>
      <member refid="classPointer_1a8ded051c871b7fccfb6b2a20b8920cab" prot="public" virt="virtual"><scope>Spointer</scope><name>rank</name></member>
      <member refid="group__table_1ga467ee6f93cd0429edb40fc4de100c3c4" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gaad8a647a58df31aefd8f2703b9f86dc5" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="group__table_1ga49f82b7aafd3ae237243c85272597fa7" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="group__table_1ga72441f0d67497c90602a123c45dc53d1" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gaf40e1a1f0edc608d4413f096a19aae78" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gac303715911a48c482acb6ae4188508d3" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="group__table_1gad078973f8318ccf5800db79e87584dcc" prot="public" virt="non-virtual"><scope>Spointer</scope><name>Spointer</name></member>
      <member refid="classSpointer_1a8fa50c04246ceb3a48e961946a2427f7" prot="public" virt="non-virtual"><scope>Spointer</scope><name>state</name></member>
      <member refid="group__table_1ga06fa67855bfb50d81e18bdfacce965ce" prot="public" virt="virtual"><scope>Spointer</scope><name>subsume</name></member>
      <member refid="group__table_1ga4ca596fe52abd36d550a10818678d54c" prot="public" virt="virtual"><scope>Spointer</scope><name>terminalWeight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
