<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespaceScoreModel" kind="namespace" language="C++">
    <compoundname>ScoreModel</compoundname>
    <innerclass refid="classScoreModel_1_1Beam" prot="public">ScoreModel::Beam</innerclass>
    <innerclass refid="classScoreModel_1_1Duration" prot="public">ScoreModel::Duration</innerclass>
    <innerclass refid="classScoreModel_1_1Event" prot="public">ScoreModel::Event</innerclass>
    <innerclass refid="classScoreModel_1_1Measure" prot="public">ScoreModel::Measure</innerclass>
    <innerclass refid="classScoreModel_1_1Note" prot="public">ScoreModel::Note</innerclass>
    <innerclass refid="classScoreModel_1_1Part" prot="public">ScoreModel::Part</innerclass>
    <innerclass refid="classScoreModel_1_1Rest" prot="public">ScoreModel::Rest</innerclass>
    <innerclass refid="classScoreModel_1_1Score" prot="public">ScoreModel::Score</innerclass>
    <innerclass refid="classScoreModel_1_1ScoreMeter" prot="public">ScoreModel::ScoreMeter</innerclass>
    <innerclass refid="classScoreModel_1_1Sequence" prot="public">ScoreModel::Sequence</innerclass>
    <innerclass refid="classScoreModel_1_1SpanningElement" prot="public">ScoreModel::SpanningElement</innerclass>
    <innerclass refid="classScoreModel_1_1Tuplet" prot="public">ScoreModel::Tuplet</innerclass>
    <innerclass refid="classScoreModel_1_1Voice" prot="public">ScoreModel::Voice</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceScoreModel_1aef5e9313fc764e514481998742a22129" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classPitch" kindref="compound">Pitch</ref>, <ref refid="classPitch" kindref="compound">Pitch</ref> &gt;</type>
        <definition>typedef std::pair&lt;Pitch, Pitch&gt; ScoreModel::VoiceRange</definition>
        <argsstring></argsstring>
        <name>VoiceRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scoremodel/Voice.hpp" line="31" column="1" bodyfile="src/scoremodel/Voice.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceScoreModel_1a6dfeff7ae2e3434c563b5ba3cc4306ee" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classScoreModel_1_1Note" kindref="compound">Note</ref> *, <ref refid="classScoreModel_1_1Note" kindref="compound">Note</ref> * &gt;</type>
        <definition>typedef std::pair&lt;Note*, Note*&gt; ScoreModel::Tie</definition>
        <argsstring></argsstring>
        <name>Tie</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scoremodel/Voice.hpp" line="33" column="1" bodyfile="src/scoremodel/Voice.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceScoreModel_1a0313e49d03ca4f556de489bec473e7a8" prot="public" static="yes" mutable="no">
        <type><ref refid="classScoreModel_1_1Event" kindref="compound">Event</ref> *</type>
        <definition>Event* ScoreModel::lastEvent</definition>
        <argsstring></argsstring>
        <name>lastEvent</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scoremodel/Voice.cpp" line="13" column="1" bodyfile="src/scoremodel/Voice.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Representation and management of beams</para>
<para><simplesect kind="author"><para>Philippe RigauxA beam encompasses n events</para>
</simplesect>
Representation of duration</para>
<para><simplesect kind="author"><para>Philippe RigauxA duration has an internal representation as a rational.</para>
</simplesect>
Value 1 is a whole note</para>
<para>Several utility methods allow to get the symbolic representation</para>
<para>Abstract model of Events</para>
<para><simplesect kind="author"><para>Philippe RigauxAn <ref refid="classScoreModel_1_1Event" kindref="compound">Event</ref> is anything that has a duration</para>
</simplesect>
Measures</para>
<para><simplesect kind="author"><para>Philippe Rigaux</para>
</simplesect>
Model of a part</para>
<para><simplesect kind="author"><para>Philippe RigauxA part is a set of voices, to be played by a single instrument/performer</para>
</simplesect>
Model of a score</para>
<para><simplesect kind="author"><para>Philippe RigauxThe score class: models a score content</para>
</simplesect>
Representation of a score meter</para>
<para><simplesect kind="author"><para>Philippe Rigaux</para>
</simplesect>
A sequence = a list of events</para>
<para>Utility class used for sequential calculations</para>
<para><simplesect kind="author"><para>Philippe RigauxA sequence is a list of events</para>
</simplesect>
Abstract class for spanning elements</para>
<para><simplesect kind="author"><para>Philippe RigauxA spanning element provides a notation for a sequence of events.</para>
</simplesect>
Examples of sub-classes are: slurs, beams, tuplets</para>
<para>Representation of yuplets</para>
<para><simplesect kind="author"><para>Philippe RigauxA tuplet encompasses n events, and covers a regular duration</para>
</simplesect>
Abstract model of voice</para>
<para><simplesect kind="author"><para>Philippe RigauxA voice is a sequence of event, belonging to a <ref refid="classScoreModel_1_1Part" kindref="compound">Part</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/output/MEI.cpp" line="19" column="1"/>
  </compounddef>
</doxygen>
