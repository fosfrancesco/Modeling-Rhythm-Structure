<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classInputSegmentMIDI" kind="class" language="C++" prot="public">
    <compoundname>InputSegmentMIDI</compoundname>
    <basecompoundref refid="classInputSegment" prot="public" virt="non-virtual">InputSegment</basecompoundref>
    <includes local="no">InputSegmentMIDI.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classInputSegmentMIDI_1a59b454599bc1d06f59901947c89f4900" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string InputSegmentMIDI::_filename</definition>
        <argsstring></argsstring>
        <name>_filename</name>
        <briefdescription>
<para>name of text file read for building this input segment </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR mv export to segment/InputSegment* classes </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="133" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classInputSegmentMIDI_1a3c671881444538af92edd1ea361a2c0e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int InputSegmentMIDI::_tracknb</definition>
        <argsstring></argsstring>
        <name>_tracknb</name>
        <briefdescription>
<para>track number used for importing from MIDI file </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR mv export to segment/InputSegment* classes. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="138" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classInputSegmentMIDI_1a3ff9b7885e55bbf9205806c7ef436b6b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t InputSegmentMIDI::_status</definition>
        <argsstring></argsstring>
        <name>_status</name>
        <briefdescription>
<para>status code returned by import. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="141" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classInputSegmentMIDI_1a8ae9a7a113d9b3fec0643cf8773a69df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputSegmentMIDI::InputSegmentMIDI</definition>
        <argsstring>(const std::string filename, int tracknb=1)</argsstring>
        <name>InputSegmentMIDI</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tracknb</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>read input segment from a MIDI file. </para>
        </briefdescription>
        <detaileddescription>
<para>The musical onsets and durations are all set to UNKNOWN. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of input MIDI file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tracknb</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI track read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="52" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="12" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1ad337626161ab1a2ff80a4d845421a9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputSegmentMIDI::InputSegmentMIDI</definition>
        <argsstring>(MidiFile &amp;midifile, int tracknb=1)</argsstring>
        <name>InputSegmentMIDI</name>
        <param>
          <type>MidiFile &amp;</type>
          <declname>midifile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tracknb</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>read input segment from a MIDI file. </para>
        </briefdescription>
        <detaileddescription>
<para>The musical onsets and durations are all set to UNKNOWN. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>midifile</parametername>
</parameternamelist>
<parameterdescription>
<para>a MIDIfile object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tracknb</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI track read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="59" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="41" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a97c065fd510e9a925e12e44b6378f394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputSegmentMIDI::InputSegmentMIDI</definition>
        <argsstring>(const std::string filename, bool mono=true, bool norest=false, int tracknb=1)</argsstring>
        <name>InputSegmentMIDI</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mono</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>norest</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>tracknb</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>read input segment from a MIDI file. </para>
        </briefdescription>
        <detaileddescription>
<para>the musical onsets and durations are all set to -1 for backward compatibility. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mono</parametername>
</parameternamelist>
<parameterdescription>
<para>flag : set if we want a monophonic input segment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norest</parametername>
</parameternamelist>
<parameterdescription>
<para>flag : if set, rests in MIDI file are ignored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="69" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="407" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a6a5548fa47cfe652b80b0e7dcfcf9735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputSegmentMIDI::InputSegmentMIDI</definition>
        <argsstring>(const InputSegmentMIDI &amp;)</argsstring>
        <name>InputSegmentMIDI</name>
        <param>
          <type>const <ref refid="classInputSegmentMIDI" kindref="compound">InputSegmentMIDI</ref> &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="75" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1ab7134dc1b01d7f45b95df4b2b448a716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual InputSegmentMIDI::~InputSegmentMIDI</definition>
        <argsstring>()</argsstring>
        <name>~InputSegmentMIDI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="77" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a55fbf779b44ae82b17bad1f2839c8c78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string InputSegmentMIDI::filename</definition>
        <argsstring>() const</argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="79" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a936c91d6d4d71d1e968808064455e9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t InputSegmentMIDI::export_midifile</definition>
        <argsstring>(std::string, Rational)</argsstring>
        <name>export_midifile</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
        </param>
        <briefdescription>
<para>copy input midifile into output_midifile. </para>
        </briefdescription>
        <detaileddescription>
<para>update the onsets / offsets to the quantized values in this segment. <simplesect kind="warning"><para>this segment must have been created from a midi file. </para>
</simplesect>
<simplesect kind="warning"><para>the musical date and duration must have been set in this segment.</para>
</simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR mv export to segment/InputSegment* classes </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a647bb0ebc71484c531c13ded3a86839c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t InputSegmentMIDI::status</definition>
        <argsstring>() const</argsstring>
        <name>status</name>
        <briefdescription>
<para>exit status code for MIDI import </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if import or export worked well </para>
</simplesect>
<simplesect kind="return"><para>error code &gt; 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="97" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a6c0b140ef054db3d0669ffbb11c8c29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t InputSegmentMIDI::export_midifile</definition>
        <argsstring>(MidiFile &amp;midifile, std::string midiout, Rational beatperbar)</argsstring>
        <name>export_midifile</name>
        <param>
          <type>MidiFile &amp;</type>
          <declname>midifile</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>midiout</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>beatperbar</declname>
        </param>
        <briefdescription>
<para>copy input midifile into output_midifile. </para>
        </briefdescription>
        <detaileddescription>
<para>update the onsets / offsets to the quantized values in this segment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>midifile</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDIfile struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>midiout</parametername>
</parameternamelist>
<parameterdescription>
<para>name of output midifile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beatperbar</parametername>
</parameternamelist>
<parameterdescription>
<para>number of beats per bar (for producing output midifile) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>this segment must have been created from a midi file. </para>
</simplesect>
<simplesect kind="warning"><para>the musical date and duration must have been set in this segment.</para>
</simplesect>
<xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR mv export to segment/InputSegment* classes </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1af2ac856f11e5ebbca039e988e0df0d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t InputSegmentMIDI::export_midifile_mono</definition>
        <argsstring>(MidiFile &amp;midifile, std::string midiout, Rational beatperbar)</argsstring>
        <name>export_midifile_mono</name>
        <param>
          <type>MidiFile &amp;</type>
          <declname>midifile</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>midiout</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>beatperbar</declname>
        </param>
        <briefdescription>
<para>copy input midifile into output_midifile, monophonic case. </para>
        </briefdescription>
        <detaileddescription>
<para>update the onsets / offsets to the quantized values in this segment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>midifile</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDIfile struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>midiout</parametername>
</parameternamelist>
<parameterdescription>
<para>name of output midifile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beatperbar</parametername>
</parameternamelist>
<parameterdescription>
<para>number of beats per bar (for producing output midifile) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>this segment must have been created from a midi file. </para>
</simplesect>
<simplesect kind="warning"><para>the musical date and duration must have been set in this segment.</para>
</simplesect>
<xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR mv export to segment/InputSegment* classes </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="125" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="263" bodyend="395"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classInputSegmentMIDI_1aa87592b9f717330b48ce3ee68ef2b8bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t InputSegmentMIDI::import_midifile</definition>
        <argsstring>(MidiFile &amp;midifile, int tracknb)</argsstring>
        <name>import_midifile</name>
        <param>
          <type>MidiFile &amp;</type>
          <declname>midifile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tracknb</declname>
        </param>
        <briefdescription>
<para>import input segment from MIDI file second arguent is track number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="145" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="66" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1ad4c97d780926649df8b73e8a55032cdc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InputSegmentMIDI::import_midifile_mono</definition>
        <argsstring>(MidiFile &amp;midifile, int tracknb, bool norest)</argsstring>
        <name>import_midifile_mono</name>
        <param>
          <type>MidiFile &amp;</type>
          <declname>midifile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tracknb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norest</declname>
        </param>
        <briefdescription>
<para>import monophonic input segment from MIDIfile second arguent is track number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="149" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="445" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classInputSegmentMIDI_1a6eac4701812d3ba4b2be00f5f22b3ea0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InputSegmentMIDI::push</definition>
        <argsstring>(MusEvent *e, double onset, double duration)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="classMusEvent" kindref="compound">MusEvent</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>onset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>add new timestamped polyphonic event. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>TBR (tmp, for compatibility) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/input/InputSegmentMIDI.hpp" line="154" column="1" bodyfile="src/input/InputSegmentMIDI.cpp" bodystart="439" bodyend="442"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>import an <ref refid="classInputSegment" kindref="compound">InputSegment</ref> from a MIDI file. </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>The segment contains the NOTE-ON and NOTE-OFF events in the MIDI file, with the realtime dates.</para>
</listitem><listitem><para>The musical dates and duration as set to unknown.</para>
</listitem><listitem><para>Every NOTE_ON event is linked to the closest posteroir NOTE-OFF event with the same MIDI key. It is left unmatched (without warning) if there is no such matching NOTE-OFF.</para>
</listitem><listitem><para>Several NOTE-ON with the same key may be linked to the same NOTE-OFF (a warning is displayed in this case).</para>
</listitem><listitem><para>Unmatched NOTE-OFF are added with a warning. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="114">
        <label>InputSegment</label>
        <link refid="classInputSegment"/>
      </node>
      <node id="113">
        <label>InputSegmentMIDI</label>
        <link refid="classInputSegmentMIDI"/>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="116">
        <label>InputSegment</label>
        <link refid="classInputSegment"/>
        <childnode refid="117" relation="usage">
          <edgelabel>_mduration</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>InputSegmentMIDI</label>
        <link refid="classInputSegmentMIDI"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>Rational</label>
        <link refid="classRational"/>
      </node>
    </collaborationgraph>
    <location file="src/input/InputSegmentMIDI.hpp" line="45" column="1" bodyfile="src/input/InputSegmentMIDI.hpp" bodystart="44" bodyend="171"/>
    <listofallmembers>
      <member refid="classInputSegment_1ae5267be6a3c036290ee028d032b4c4fc" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_begin</name></member>
      <member refid="classInputSegment_1a1c6cb6bc0004bc8fa2a1e4667f861f3e" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_end</name></member>
      <member refid="classInputSegment_1ac4494ab7de01a9b0f60cdcede78ac847" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_events</name></member>
      <member refid="classInputSegmentMIDI_1a59b454599bc1d06f59901947c89f4900" prot="private" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_filename</name></member>
      <member refid="classInputSegment_1a8f5be09886f96f15d6c82a2828bef194" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_heap</name></member>
      <member refid="classInputSegment_1addcc23fc9ea6a3cb342fd2960b5fbc78" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_len</name></member>
      <member refid="classInputSegment_1a0ab26fdbc02f67159a8f619254fa7440" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_mduration</name></member>
      <member refid="classInputSegmentMIDI_1a3ff9b7885e55bbf9205806c7ef436b6b" prot="private" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_status</name></member>
      <member refid="classInputSegmentMIDI_1a3c671881444538af92edd1ea361a2c0e" prot="private" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>_tracknb</name></member>
      <member refid="group__segment_1gabb6224ab371e84d2048f3c9e2692d15d" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>add_back</name></member>
      <member refid="group__segment_1ga2c58dc6e5e032dc7fee299be296371e4" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>add_back</name></member>
      <member refid="group__segment_1gad44eb7379e181fc4295ee2514a568204" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>add_floating</name></member>
      <member refid="group__segment_1gabb9443e79fcefd19a5c7b65c4e54102a" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>add_floating</name></member>
      <member refid="group__segment_1gaccf3b9127fc3d068a95af19f46d9052d" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>begin</name></member>
      <member refid="group__segment_1gaff8f8c77de90a74f028f2e7a6ea32f90" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>cbegin</name></member>
      <member refid="group__segment_1ga9eae7fefbf0884764ff6a75fc5fa063b" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>cend</name></member>
      <member refid="group__segment_1ga82a64bae54200b634bc42ac06dc7a916" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>check_index</name></member>
      <member refid="group__segment_1gae75db088893a7cfc719ec393e09d7ece" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>close</name></member>
      <member refid="group__segment_1ga1cc736fda27974f59c2e2dfc44eedf9e" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>end</name></member>
      <member refid="group__segment_1gafaa215f8df4e03b3e22c4c5eb3e494ca" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>event</name></member>
      <member refid="classInputSegmentMIDI_1a936c91d6d4d71d1e968808064455e9d4" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>export_midifile</name></member>
      <member refid="classInputSegmentMIDI_1a6c0b140ef054db3d0669ffbb11c8c29b" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>export_midifile</name></member>
      <member refid="classInputSegmentMIDI_1af2ac856f11e5ebbca039e988e0df0d9d" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>export_midifile_mono</name></member>
      <member refid="classInputSegmentMIDI_1a55fbf779b44ae82b17bad1f2839c8c78" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>filename</name></member>
      <member refid="classInputSegment_1a3989ef5c44913cb1896920916cdcfcf8" prot="public" virt="virtual"><scope>InputSegmentMIDI</scope><name>hasType</name></member>
      <member refid="classInputSegmentMIDI_1aa87592b9f717330b48ce3ee68ef2b8bb" prot="private" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>import_midifile</name></member>
      <member refid="classInputSegmentMIDI_1ad4c97d780926649df8b73e8a55032cdc" prot="private" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>import_midifile_mono</name></member>
      <member refid="group__segment_1gaec471ec05052a932b1bb2738bfc8b172" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegment</name></member>
      <member refid="group__segment_1ga0ca7fa41c0dadabbaa112fdde9e48492" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegment</name></member>
      <member refid="group__segment_1ga58d6af0b8186068f4bc26f58e6e62eef" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegment</name></member>
      <member refid="classInputSegmentMIDI_1a8ae9a7a113d9b3fec0643cf8773a69df" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegmentMIDI</name></member>
      <member refid="classInputSegmentMIDI_1ad337626161ab1a2ff80a4d845421a9f6" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegmentMIDI</name></member>
      <member refid="classInputSegmentMIDI_1a97c065fd510e9a925e12e44b6378f394" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegmentMIDI</name></member>
      <member refid="classInputSegmentMIDI_1a6a5548fa47cfe652b80b0e7dcfcf9735" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>InputSegmentMIDI</name></member>
      <member refid="group__segment_1ga43310a16681e2241b20da4b68de9f35b" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>link</name></member>
      <member refid="group__segment_1ga6fce03f54fe517cc9541ea446cd26a50" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>mdate</name></member>
      <member refid="classInputSegment_1aa5410aeef3d5c6a263424b252eb78511" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>mduration</name></member>
      <member refid="group__segment_1ga2c16ef8a681bf9fded1dba29c1a84342" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>mduration</name></member>
      <member refid="group__segment_1ga2dbfcbf9664a10c1245e298b9257d5cd" prot="protected" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>ncpoint</name></member>
      <member refid="group__segment_1ga5463f900db31be4b7d109e88a710971f" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>point</name></member>
      <member refid="group__segment_1ga623c2367191018ecac046e7e11f14976" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>print</name></member>
      <member refid="classInputSegmentMIDI_1a6eac4701812d3ba4b2be00f5f22b3ea0" prot="private" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>push</name></member>
      <member refid="group__segment_1ga42c65e4989c84fbce42115d8e7813f8e" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>quantize</name></member>
      <member refid="classInputSegment_1a2aa5d8948f3ac162a770bc84bb23ca2f" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>quantized</name></member>
      <member refid="group__segment_1gab4c42d088ce3d170b7899712789ab464" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>quantizu</name></member>
      <member refid="classInputSegment_1a78b3f9b3b422ee5f92ba14056a76ccff" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>rbegin</name></member>
      <member refid="group__segment_1ga7c26187b3e70ea62bd10b9b15284a99a" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>rdate</name></member>
      <member refid="classInputSegment_1a590310d241cec28ac9b03b6a6708489b" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>rduration</name></member>
      <member refid="group__segment_1gafbf05e143d416de49180d2f18a53977b" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>rduration</name></member>
      <member refid="group__segment_1ga5ce66f635c2ab912e0ec9662c5c2ceaf" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>rduration</name></member>
      <member refid="classInputSegment_1ad81105da6beb534a48a59d9219476732" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>rend</name></member>
      <member refid="group__segment_1ga2d78677ab3ea44ae91034c4e312e778c" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>respell</name></member>
      <member refid="group__segment_1gac79787254008e05d9f54226d93dcb0cb" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>respell</name></member>
      <member refid="group__segment_1ga05fee2bd8565c3076a6d800e37d7ab63" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>size</name></member>
      <member refid="classInputSegmentMIDI_1a647bb0ebc71484c531c13ded3a86839c" prot="public" virt="non-virtual"><scope>InputSegmentMIDI</scope><name>status</name></member>
      <member refid="group__segment_1gab8da320feb29d4b009d2e6a37924337e" prot="public" virt="virtual"><scope>InputSegmentMIDI</scope><name>~InputSegment</name></member>
      <member refid="classInputSegmentMIDI_1ab7134dc1b01d7f45b95df4b2b448a716" prot="public" virt="virtual"><scope>InputSegmentMIDI</scope><name>~InputSegmentMIDI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
