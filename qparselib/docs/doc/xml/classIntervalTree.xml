<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classIntervalTree" kind="class" language="C++" prot="public">
    <compoundname>IntervalTree</compoundname>
    <basecompoundref refid="classAlignedInterval" prot="public" virt="non-virtual">AlignedInterval</basecompoundref>
    <includes local="no">IntervalTree.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classIntervalTree_1ac157527bf2349e36ef2475096d268e4e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class IntervalHeap</definition>
        <argsstring></argsstring>
        <name>IntervalHeap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="36" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classIntervalTree_1a88e4c8c1ec09527a477646747e482fe4" prot="protected" static="no" mutable="no">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree* IntervalTree::_parent</definition>
        <argsstring></argsstring>
        <name>_parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="126" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIntervalTree_1a36b39cfc069e75085d3471b73e7c0d8d" prot="protected" static="no" mutable="no">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree* IntervalTree::_previous_sibling</definition>
        <argsstring></argsstring>
        <name>_previous_sibling</name>
        <briefdescription>
<para>previous sibling <ref refid="classInterval" kindref="compound">Interval</ref> in the <ref refid="classInterval" kindref="compound">Interval</ref> tree. </para>
        </briefdescription>
        <detaileddescription>
<para>NULL if this <ref refid="classInterval" kindref="compound">Interval</ref> is the leftmost sibling </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="131" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIntervalTree_1ab33b66f644ed154e05a69c13e979f1cd" prot="protected" static="no" mutable="no">
        <type>std::map&lt; size_t, std::vector&lt; <ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> * &gt; &gt;</type>
        <definition>std::map&lt;size_t, std::vector&lt;IntervalTree*&gt; &gt; IntervalTree::_children</definition>
        <argsstring></argsstring>
        <name>_children</name>
        <briefdescription>
<para>direct access to subtrees. </para>
        </briefdescription>
        <detaileddescription>
<para>every entry in this map associate to an arity a a partition t1,...,ta of the root interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="137" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__segment_1gae2c50e46e3997dd8631669046bf06c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IntervalTree::~IntervalTree</definition>
        <argsstring>()</argsstring>
        <name>~IntervalTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="42" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classIntervalTree_1a68c95f629571e4d24caa9dfc669a4412" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>virtual IntervalTree* IntervalTree::parent</definition>
        <argsstring>()</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the embedding <ref refid="classInterval" kindref="compound">Interval</ref> in the <ref refid="classInterval" kindref="compound">Interval</ref> tree. </para>
</simplesect>
<simplesect kind="return"><para>NULL if this <ref refid="classInterval" kindref="compound">Interval</ref> is the root of the tree. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="46" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classIntervalTree_1a0b640dcd2f3e26d31a1d4d7b3fd305ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>virtual IntervalTree* IntervalTree::previous_sibling</definition>
        <argsstring>()</argsstring>
        <name>previous_sibling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the previous sibling <ref refid="classInterval" kindref="compound">Interval</ref> in the <ref refid="classInterval" kindref="compound">Interval</ref> tree. </para>
</simplesect>
<simplesect kind="return"><para>NULL if this <ref refid="classInterval" kindref="compound">Interval</ref> is the leftmost sibling. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="51" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="51" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__segment_1ga0c04840a0d05d3b0d4b99e654d72b81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree * IntervalTree::top</definition>
        <argsstring>(const InputSegment *s, IntervalHeap *h, Rational mend=Rational(1))</argsstring>
        <name>top</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classIntervalHeap" kindref="compound">IntervalHeap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mend</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <briefdescription>
<para>top interval (root of interval tree) covering the whole length of the given input segment s. </para>
        </briefdescription>
        <detaileddescription>
<para>inside-bar interval of musical time duration of 1 bar if flag bar is true. multi-bar interval if flag bar is false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="59" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__segment_1gae9e8f6ca3fa4093cfcd1428e9f41d048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree * IntervalTree::split</definition>
        <argsstring>(const InputSegment *, IntervalHeap *, double rdur, Rational mdur, size_t i)</argsstring>
        <name>split</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="classIntervalHeap" kindref="compound">IntervalHeap</ref> *</type>
          <defname>ih</defname>
        </param>
        <param>
          <type>double</type>
          <declname>rdur</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>return a sub interval. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>if i = 1 first sub-interval starting at same point as this interval of realtime duration rdur of musical duration mdur bar. it not is aligned.</para>
</listitem><listitem><para>if i = 2 second sub-interval (rest) starting at this interval realtime start + rdur and this interval musical time start + mdur of realtime duration this realtime duration - rdur. if the real starting date is out of this interval, then the real duration of the returned second sub-interval is zero. the musical starting date must be inside this interval. it is not aligned.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="83" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="62" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__segment_1ga5b1393db865d0dd81249033dd99ecd5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree * IntervalTree::split_back</definition>
        <argsstring>(const InputSegment *, IntervalHeap *, double rdur, Rational mdur, size_t i)</argsstring>
        <name>split_back</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="classIntervalHeap" kindref="compound">IntervalHeap</ref> *</type>
          <defname>ih</defname>
        </param>
        <param>
          <type>double</type>
          <declname>rdur</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mdur</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>return a sub interval. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>if i = 1 first sub-interval starts at same point as this interval of realtime duration : duration of this interval - rdur of musical duration : musical duration of this interval - mdur bars. if the starting date is out of the input segment, then the real duration of the returned first sub-interval is zero. it is not aligned.</para>
</listitem><listitem><para>if i = 2 second sub-interval (rest) starts at this interval realtime end - rdur and this interval musical time end - mdur of realtime duration rdur. it is not aligned.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdur</parametername>
</parameternamelist>
<parameterdescription>
<para>must be strictly positive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="108" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="116" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__segment_1gacb8de7e3756951950c391d241adec21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree * IntervalTree::sub</definition>
        <argsstring>(const InputSegment *, IntervalHeap *, size_t a, size_t i)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="classIntervalHeap" kindref="compound">IntervalHeap</ref> *</type>
          <defname>ih</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>return a the i-1th sub-interval of the division of this interval in n equal parts. the sub-interval returned is aligned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>must be &gt; 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>must be smaller than a. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>this interval must be aligned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="120" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="169" bodyend="229"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="group__segment_1gab092e4338aa4c3369c4fa4404d8706b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IntervalTree::IntervalTree</definition>
        <argsstring>(const InputSegment *s, Rational mend=Rational(1))</argsstring>
        <name>IntervalTree</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mend</declname>
          <defval><ref refid="classRational" kindref="compound">Rational</ref>(1)</defval>
        </param>
        <briefdescription>
<para>top interval (root of interval tree). </para>
        </briefdescription>
        <detaileddescription>
<para>covering the whole length of the given input segment s inside-bar interval of musical time duration of 1 bar if flag bar is true multi-bar interval if flag bar is false.</para>
<para><simplesect kind="warning"><para>the interval tree created is not registered to an interval heap. </para>
</simplesect>
<simplesect kind="warning"><para>not aligned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="147" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="17" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="group__segment_1gac16f2a8d9c584a869bbed6a263914360" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IntervalTree::IntervalTree</definition>
        <argsstring>(const InputSegment *s, Rational mbeg, Rational mend, double rbeg, double rend, size_t first, IntervalTree *p=NULL, IntervalTree *ps=NULL)</argsstring>
        <name>IntervalTree</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mbeg</declname>
        </param>
        <param>
          <type><ref refid="classRational" kindref="compound">Rational</ref></type>
          <declname>mend</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rbeg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rend</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
          <declname>p</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
          <declname>ps</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>build an interval tree with musical-time bounds [mbegin, mbegin+mdur[ and real-time bounds [rbegin, rbegin+rdur[ for the input segment s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the previous sibling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>not aligned - must be aligned afterwards. </para>
</simplesect>
<simplesect kind="warning"><para>use only internaly construction of recursive paths. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/segment/IntervalTree.hpp" line="159" column="1" bodyfile="src/segment/IntervalTree.cpp" bodystart="27" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>extension of Aligned <ref refid="classInterval" kindref="compound">Interval</ref> to define a tree of nested Alignements with sharing using hash table to store all alignment constructed. </para>
    </briefdescription>
    <detaileddescription>
<para>to construct <ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> use <ref refid="group__segment_1gad7fd7dd4ddb8d520df0985e67d180019" kindref="member">IntervalHeap.make</ref> and the members top, split, split_back and sub. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="144">
        <label>Interval</label>
        <link refid="classInterval"/>
      </node>
      <node id="143">
        <label>AlignedInterval</label>
        <link refid="classAlignedInterval"/>
        <childnode refid="144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="142">
        <label>IntervalTree</label>
        <link refid="classIntervalTree"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="147">
        <label>Interval</label>
        <link refid="classInterval"/>
        <childnode refid="148" relation="usage">
          <edgelabel>mbegin</edgelabel>
          <edgelabel>mend</edgelabel>
        </childnode>
      </node>
      <node id="146">
        <label>AlignedInterval</label>
        <link refid="classAlignedInterval"/>
        <childnode refid="147" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>IntervalTree</label>
        <link refid="classIntervalTree"/>
        <childnode refid="146" relation="public-inheritance">
        </childnode>
        <childnode refid="145" relation="usage">
          <edgelabel>_previous_sibling</edgelabel>
          <edgelabel>_parent</edgelabel>
        </childnode>
      </node>
      <node id="148">
        <label>Rational</label>
        <link refid="classRational"/>
      </node>
    </collaborationgraph>
    <location file="src/segment/IntervalTree.hpp" line="35" column="1" bodyfile="src/segment/IntervalTree.hpp" bodystart="34" bodyend="166"/>
    <listofallmembers>
      <member refid="classIntervalTree_1ab33b66f644ed154e05a69c13e979f1cd" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>_children</name></member>
      <member refid="classIntervalTree_1a88e4c8c1ec09527a477646747e482fe4" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>_parent</name></member>
      <member refid="classIntervalTree_1a36b39cfc069e75085d3471b73e7c0d8d" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>_previous_sibling</name></member>
      <member refid="group__segment_1ga25f42094dbb3623c73df11dd85596185" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>align</name></member>
      <member refid="group__segment_1ga85de404c4ddf91a51bf0c29c6dbe1d77" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>align</name></member>
      <member refid="group__segment_1gaeb6593290d19ff04137c3f3c3e9e3175" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>aligned</name></member>
      <member refid="group__segment_1ga7e9399ce64bb21aa2d2c3cd682ca95da" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>AlignedInterval</name></member>
      <member refid="group__segment_1ga5bf2bf3fe1a1791989ec52969aace0a5" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>AlignedInterval</name></member>
      <member refid="group__segment_1ga4aa5548293e2dcd94ab3845d9a8fe492" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>AlignedInterval</name></member>
      <member refid="classAlignedInterval_1a1660736ae6e829e6c92616e49784a583" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>first</name></member>
      <member refid="classAlignedInterval_1adefeebb5ddd10a68e83ed7382626d380" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>inhabited</name></member>
      <member refid="group__segment_1ga3af4cc83b5ee3d320fa5b24fa244fabb" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>insideBar</name></member>
      <member refid="group__segment_1gadfaf31fca3f5e5da49e37c7baa275125" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>Interval</name></member>
      <member refid="group__segment_1ga17cfcca410ae94fe906dfcdb726026f5" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>Interval</name></member>
      <member refid="group__segment_1ga43e7da7f24dfa17fccdd0dd40a96f458" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>Interval</name></member>
      <member refid="group__segment_1gaefc21b7c838661c05286304f6d891690" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>Interval</name></member>
      <member refid="classIntervalTree_1ac157527bf2349e36ef2475096d268e4e" prot="private" virt="non-virtual"><scope>IntervalTree</scope><name>IntervalHeap</name></member>
      <member refid="group__segment_1gab092e4338aa4c3369c4fa4404d8706b0" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>IntervalTree</name></member>
      <member refid="group__segment_1gac16f2a8d9c584a869bbed6a263914360" prot="protected" virt="non-virtual"><scope>IntervalTree</scope><name>IntervalTree</name></member>
      <member refid="classAlignedInterval_1a85114f9883305f0cf975dbdffff41772" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>lfirst</name></member>
      <member refid="classAlignedInterval_1a260f8eead747a05642d7b5d720d02e5b" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>lsize</name></member>
      <member refid="classInterval_1a6c8385bc5875cb761827f9e75f783834" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>mbegin</name></member>
      <member refid="classInterval_1aaed8b0e404390af39c51e657636bf14d" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>mduration</name></member>
      <member refid="classInterval_1a963b9b36f085a7db9c159c55608f8408" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>mend</name></member>
      <member refid="classAlignedInterval_1ac9617c302c66993c1f84c757f2c71d16" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>next</name></member>
      <member refid="group__segment_1ga304aac2ec620d785bbfb67996a7a613b" prot="public" virt="virtual"><scope>IntervalTree</scope><name>operator=</name></member>
      <member refid="group__segment_1ga6508f58e15c54be6146d5505d91a4b91" prot="public" virt="virtual" ambiguityscope="Interval::"><scope>IntervalTree</scope><name>operator=</name></member>
      <member refid="group__segment_1ga40f7de6ee8d8b73172ca1dbfa54bfe62" prot="public" virt="virtual"><scope>IntervalTree</scope><name>operator==</name></member>
      <member refid="group__segment_1ga4b0896bf3843fec18d68a130fe9a49f6" prot="public" virt="virtual" ambiguityscope="Interval::"><scope>IntervalTree</scope><name>operator==</name></member>
      <member refid="classIntervalTree_1a68c95f629571e4d24caa9dfc669a4412" prot="public" virt="virtual"><scope>IntervalTree</scope><name>parent</name></member>
      <member refid="classIntervalTree_1a0b640dcd2f3e26d31a1d4d7b3fd305ed" prot="public" virt="virtual"><scope>IntervalTree</scope><name>previous_sibling</name></member>
      <member refid="classInterval_1aa17f339b42a23f6afc188971e7003d84" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rbegin</name></member>
      <member refid="classInterval_1afbb05608fd0b263d905a29480e921b75" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rduration</name></member>
      <member refid="classInterval_1a1acb3128311a318b23e68cc8ca0182e9" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rend</name></member>
      <member refid="group__segment_1gafad6a7eea9e5892cfae9986f6263a738" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rewind</name></member>
      <member refid="group__segment_1ga1a6a8f006c2d11e8f4af7250a6fb0b16" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rewind</name></member>
      <member refid="classAlignedInterval_1aa7c4a66d5fd0ff2dc29a4fea57f0c561" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rfirst</name></member>
      <member refid="classAlignedInterval_1abf3b5daa25e0d74999e5a2d1d04cd185" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>rsize</name></member>
      <member refid="classAlignedInterval_1aacfe86f36bfd28f6a56c7a673ed7dad7" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>size</name></member>
      <member refid="group__segment_1gae9e8f6ca3fa4093cfcd1428e9f41d048" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>split</name></member>
      <member refid="group__segment_1ga5b1393db865d0dd81249033dd99ecd5c" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>split_back</name></member>
      <member refid="group__segment_1gacb8de7e3756951950c391d241adec21c" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>sub</name></member>
      <member refid="group__segment_1ga0c04840a0d05d3b0d4b99e654d72b81b" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>top</name></member>
      <member refid="classAlignedInterval_1ae327b28af603aaffbe9bc8480c6e2109" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>~AlignedInterval</name></member>
      <member refid="classInterval_1a923e1717a3dedfe1ba90f81fcb26d5c5" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>~Interval</name></member>
      <member refid="group__segment_1gae2c50e46e3997dd8631669046bf06c27" prot="public" virt="non-virtual"><scope>IntervalTree</scope><name>~IntervalTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
