<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classComboWTA" kind="class" language="C++" prot="public">
    <compoundname>ComboWTA</compoundname>
    <basecompoundref refid="classWTA" prot="public" virt="non-virtual">WTA</basecompoundref>
    <includes local="no">ComboWTA.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classComboWTA_1a5221a39fd048f573d90cd6347e7243bd" prot="private" static="no" mutable="no">
        <type>const <ref refid="classWTA" kindref="compound">WTA</ref> &amp;</type>
        <definition>const WTA&amp; ComboWTA::_schema</definition>
        <argsstring></argsstring>
        <name>_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="201" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classComboWTA_1ae47ff12428c8d982023c0d2ed9e15cd4" prot="private" static="no" mutable="no">
        <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
        <definition>const InputSegment* ComboWTA::segment</definition>
        <argsstring></argsstring>
        <name>segment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="203" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classComboWTA_1a5d2e905c7d012dea4fbe83c738578d3f" prot="private" static="no" mutable="no">
        <type><ref refid="classIntervalHeap" kindref="compound">IntervalHeap</ref> *</type>
        <definition>IntervalHeap* ComboWTA::iheap</definition>
        <argsstring></argsstring>
        <name>iheap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="204" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classComboWTA_1a831c004780e3eb194679df57920ec55f" prot="private" static="no" mutable="no">
        <type>state_t</type>
        <definition>state_t ComboWTA::_cpt</definition>
        <argsstring></argsstring>
        <name>_cpt</name>
        <briefdescription>
<para>counter for new <ref refid="classComboWTA" kindref="compound">ComboWTA</ref> states </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="207" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classComboWTA_1a71bceb2b100d8eae9210411673642a5d" prot="private" static="no" mutable="no">
        <type>Combomap</type>
        <definition>Combomap ComboWTA::_statemap</definition>
        <argsstring></argsstring>
        <name>_statemap</name>
        <briefdescription>
<para>map&lt;ComboState, state_t&gt; _statemap; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="214" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classComboWTA_1a321eb082c056395b867823318b2c82fc" prot="private" static="no" mutable="no">
        <type><ref refid="classIntervalTree" kindref="compound">IntervalTree</ref> *</type>
        <definition>IntervalTree* ComboWTA::_tree</definition>
        <argsstring></argsstring>
        <name>_tree</name>
        <briefdescription>
<para>tree of Alignments (Path with info on alignment to input segment) organized hierarchically by sub-alignments the ComboStates use the pointers stored in this tree </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="219" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classComboWTA_1accc920ac197d5c6b2fb67b6affb871e2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; state_t &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;state_t&gt; &gt; ComboWTA::_initials</definition>
        <argsstring></argsstring>
        <name>_initials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="220" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__schemata_1ga4c589573251ec74dbe6a3c9176c39bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ComboWTA::ComboWTA</definition>
        <argsstring>(const InputSegment *, size_t bloc, const WTA &amp;, pre_t pre=0)</argsstring>
        <name>ComboWTA</name>
        <param>
          <type>const <ref refid="classInputSegment" kindref="compound">InputSegment</ref> *</type>
          <defname>seg</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bloc</declname>
        </param>
        <param>
          <type>const <ref refid="classWTA" kindref="compound">WTA</ref> &amp;</type>
          <defname>schema</defname>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>construction from input segment and <ref refid="classWTA" kindref="compound">WTA</ref> (base schema) with given max pre value and bloc number (in input segment, for alignement). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="185" column="1" bodyfile="src/schemata/ComboWTA.cpp" bodystart="460" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classComboWTA_1aa55734ef06970c324a55c31c12655d0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool ComboWTA::hasType</definition>
        <argsstring>(std::string code) const</argsstring>
        <name>hasType</name>
        <reimplements refid="classWTA_1a23060c851d5cf624215c2d9dc8ad4b45">hasType</reimplements>
        <param>
          <type>std::string</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="188" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="188" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__schemata_1ga2a6c3a5867fefdac97470fd083aaa2dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>state_t</type>
        <definition>state_t ComboWTA::initial</definition>
        <argsstring>(pre_t pre=0, pre_t post=0) const</argsstring>
        <name>initial</name>
        <reimplements refid="classWTA_1ae6b10f70925f14f36b839e5d8657bc5e">initial</reimplements>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>pre</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="group__general_1ga092fe8b972dfa977c2a0886720a7731e" kindref="member">pre_t</ref></type>
          <declname>post</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>state representing the whole segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pre</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the previous segment aligned to the left </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the current segment aligned to the right (i.e. to the left of the next segment). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="196" column="1" bodyfile="src/schemata/ComboWTA.cpp" bodystart="452" bodyend="457"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__schemata_1gae3bbd0756c7a72efc67e5085fc8be63b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>state_t</type>
        <definition>state_t ComboWTA::addComboState</definition>
        <argsstring>(const ComboState &amp;cs, bool initial=false)</argsstring>
        <name>addComboState</name>
        <param>
          <type>const <ref refid="classComboState" kindref="compound">ComboState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>returns the <ref refid="classComboWTA" kindref="compound">ComboWTA</ref> state s associated to the <ref refid="classComboState" kindref="compound">ComboState</ref> cs if there exists one. otherwise: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>a new <ref refid="classComboWTA" kindref="compound">ComboWTA</ref> state s is created,</para>
</listitem><listitem><para>s is associated to cs,</para>
</listitem><listitem><para>s is added to the table</para>
</listitem><listitem><para>the <ref refid="classComboWTA" kindref="compound">ComboWTA</ref> transitions with head s are computed and added to the table</para>
</listitem><listitem><para>s is returned <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>given <ref refid="classComboState" kindref="compound">ComboState</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial</parametername>
</parameternamelist>
<parameterdescription>
<para>flag: the state constructed is added to the initial state set of the <ref refid="classComboWTA" kindref="compound">ComboWTA</ref> if initial=true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/schemata/ComboWTA.hpp" line="238" column="1" bodyfile="src/schemata/ComboWTA.cpp" bodystart="159" bodyend="449"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classWTA" kindref="compound">WTA</ref> combo: A special kind of <ref refid="classWTA" kindref="compound">WTA</ref> for quantization constructed from. </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>a given <ref refid="classWTA" kindref="compound">WTA</ref> (base schema)</para>
</listitem><listitem><para>a given input segment (Alignment) the <ref refid="classComboWTA" kindref="compound">ComboWTA</ref> combines weights defined by the <ref refid="classWTA" kindref="compound">WTA</ref> schema (absolute measure of quality of rhythm) and a weight related to the distance of a rhythm to the given input segment.</para>
</listitem></itemizedlist>
</para>
<para>not serializable</para>
<para><simplesect kind="warning"><para>deprecatred</para>
</simplesect>
table of transitions top-down construction, given input and schema</para>
<para>principle:<itemizedlist>
<listitem><para>rp is propagated from father to leftmost child</para>
</listitem><listitem><para>rr is propagated from father to rightmost child</para>
</listitem><listitem><para>for every 2 states, s2 sibling and successive, s1.rr = s2.rp</para>
</listitem></itemizedlist>
</para>
<para>given q state of schema, p path, k &lt;= max{ n | q -&gt; q1,...,qn | w transition of schema} mright(q, p, k) = # point d’input dans la derniere 2k partie de p </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="34">
        <label>WTA</label>
        <link refid="classWTA"/>
      </node>
      <node id="33">
        <label>ComboWTA</label>
        <link refid="classComboWTA"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="38">
        <label>LetterWeight</label>
        <link refid="classLetterWeight"/>
      </node>
      <node id="36">
        <label>WTA</label>
        <link refid="classWTA"/>
        <childnode refid="37" relation="usage">
          <edgelabel>_seed</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>Weight</label>
        <link refid="classWeight"/>
        <childnode refid="38" relation="usage">
          <edgelabel>_letter</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>ComboWTA</label>
        <link refid="classComboWTA"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/schemata/ComboWTA.hpp" line="179" column="1" bodyfile="src/schemata/ComboWTA.hpp" bodystart="178" bodyend="243"/>
    <listofallmembers>
      <member refid="classComboWTA_1a831c004780e3eb194679df57920ec55f" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>_cpt</name></member>
      <member refid="classWTA_1a3ed6ca11b3e520485171a0f07deffd21" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_cpt_size</name></member>
      <member refid="classWTA_1a76cf3c27412f9d61464a8a82aea97b89" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_cpt_tr</name></member>
      <member refid="classWTA_1a52dd7c5ad9439670d75df10f2dd1e4df" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_initial</name></member>
      <member refid="classComboWTA_1accc920ac197d5c6b2fb67b6affb871e2" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>_initials</name></member>
      <member refid="classWTA_1acb19a9da4f88e4b3538b6889cbd49a08" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_max_post</name></member>
      <member refid="classWTA_1ae6d1c616caceb7819d4d23f4a635cddc" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_max_pre</name></member>
      <member refid="classComboWTA_1a5221a39fd048f573d90cd6347e7243bd" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>_schema</name></member>
      <member refid="classWTA_1ad93a124d289cf4d1e2801fccb01ca8ea" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_seed</name></member>
      <member refid="classComboWTA_1a71bceb2b100d8eae9210411673642a5d" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>_statemap</name></member>
      <member refid="classWTA_1a0d3422d597fbe64d655d9ced77dd7b8f" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>_table</name></member>
      <member refid="classComboWTA_1a321eb082c056395b867823318b2c82fc" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>_tree</name></member>
      <member refid="group__schemata_1ga91e272f4f9463149cd296f48e65a4185" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>abstract</name></member>
      <member refid="group__schemata_1ga924a1c533383a7185b9d466b59c5a495" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>add</name></member>
      <member refid="group__schemata_1ga01de1e03d09518b38ab69a2075276ae2" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>add</name></member>
      <member refid="group__schemata_1gae3bbd0756c7a72efc67e5085fc8be63b" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>addComboState</name></member>
      <member refid="group__schemata_1gab8ea841b4a1e71ef70d3fda927f0507d" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>allStates</name></member>
      <member refid="group__schemata_1ga23c3f9884c683e4bbab323208e08c672" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>begin</name></member>
      <member refid="group__schemata_1gaec169477bdc2cf883916c38dbc18e577" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>clean</name></member>
      <member refid="group__schemata_1ga4c589573251ec74dbe6a3c9176c39bb7" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>ComboWTA</name></member>
      <member refid="group__schemata_1ga9370cdd31619d49bfb0b18fa6b4e13b7" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>countAll</name></member>
      <member refid="group__schemata_1ga5f3a0d868bf26b504cccc53b4d55e09a" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>CountingtoPenalty</name></member>
      <member refid="group__schemata_1ga8dfef6b591f952f0fea9dae1f5e475c7" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>CountingtoStochastic</name></member>
      <member refid="group__schemata_1ga0f6551b20a213eb88c6a7e822ebc5915" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>countStates</name></member>
      <member refid="group__schemata_1ga8acbd7562a6f69e7634d6b9f9e341e4a" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>countTransitions</name></member>
      <member refid="group__schemata_1gada977ff7270308f29852b59f38965bde" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>empty</name></member>
      <member refid="group__schemata_1gaea41b32c37bbe955d0359039d7731fea" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>emptyStates</name></member>
      <member refid="group__schemata_1gaf5075f5a210343d6da208f4c80421cb5" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>end</name></member>
      <member refid="group__schemata_1gaa6598176fb91c70988bea7cf824ec157" prot="public" virt="virtual"><scope>ComboWTA</scope><name>eval</name></member>
      <member refid="group__schemata_1gac842f196f85e3c3b079c7c0992173e46" prot="public" virt="virtual"><scope>ComboWTA</scope><name>eval</name></member>
      <member refid="classComboWTA_1aa55734ef06970c324a55c31c12655d0f" prot="public" virt="virtual"><scope>ComboWTA</scope><name>hasType</name></member>
      <member refid="group__schemata_1gaf3c11e99698a2cf7ef039632dc5e2b6b" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>hasWeightType</name></member>
      <member refid="classComboWTA_1a5d2e905c7d012dea4fbe83c738578d3f" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>iheap</name></member>
      <member refid="group__schemata_1ga2a6c3a5867fefdac97470fd083aaa2dd" prot="public" virt="virtual"><scope>ComboWTA</scope><name>initial</name></member>
      <member refid="classWTA_1a5d8ace9f515a3902d889db560f08f4c5" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>initials</name></member>
      <member refid="group__schemata_1ga9ef4193ae949ae7c9e52d30720e37202" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>isClean</name></member>
      <member refid="group__schemata_1ga88d07a1e47cc3ee537234861b7336dd6" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>isInitial</name></member>
      <member refid="group__schemata_1ga4459bd6654cbe35b39df9cade16c6d58" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>isRegistered</name></member>
      <member refid="classWTA_1a1a5cead20cba42a111ff7ab5546bc54c" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>max_post</name></member>
      <member refid="classWTA_1a646bb2048b24358325f8e07c789af82c" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>max_pre</name></member>
      <member refid="classWTA_1aa4eda8d626af33674c59fef22c8220c1" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>normalize</name></member>
      <member refid="group__schemata_1ga28c9a7e35d4d516ef0f9967e773305f8" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>oftarget</name></member>
      <member refid="group__schemata_1gaff1196a45ffd1400bc4004e27b167218" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>PenaltytoCounting</name></member>
      <member refid="group__schemata_1gaeb713b8807bc81c6c6519ced5d531e06" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>print</name></member>
      <member refid="group__schemata_1ga3d8d24249e26ecc8bbdaf672c6e8d3cf" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>remove</name></member>
      <member refid="group__schemata_1ga625d9da502c5cd554797ebe9ee9023c4" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>resolution</name></member>
      <member refid="classComboWTA_1ae47ff12428c8d982023c0d2ed9e15cd4" prot="private" virt="non-virtual"><scope>ComboWTA</scope><name>segment</name></member>
      <member refid="group__schemata_1gab201fee50d73843159cbef5f453838f0" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>size</name></member>
      <member refid="group__schemata_1gae6fb2dbd82ed290528b90ee7bb4b6ccc" prot="protected" virt="non-virtual"><scope>ComboWTA</scope><name>step</name></member>
      <member refid="group__schemata_1ga0bddc6750b18023be6976bd5cd46a2f5" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>StochastictoPenalty</name></member>
      <member refid="group__schemata_1gabfe48e6398d83c03161b664dadcf8fcd" prot="public" virt="virtual"><scope>ComboWTA</scope><name>weight_one</name></member>
      <member refid="group__schemata_1ga762b5bbee46468815993417ca9b3d9c6" prot="public" virt="virtual"><scope>ComboWTA</scope><name>weight_zero</name></member>
      <member refid="group__schemata_1ga5636da911ebbe8772c5444172d56800d" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>WTA</name></member>
      <member refid="group__schemata_1ga6eeb789b8c8aa8404f611a6fed61faca" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>WTA</name></member>
      <member refid="group__schemata_1gaacdee6c2292baea7f712c84a5e205432" prot="public" virt="non-virtual"><scope>ComboWTA</scope><name>~WTA</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
